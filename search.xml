<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>如何将音频文件转绘声波图</title>
      <link href="/post/vue_audiovisualizer.html"/>
      <url>/post/vue_audiovisualizer.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>​哈喽！这里是苏苏吖~，在捣鼓音频转波形图的时候，在网上找了一堆的资料都不是很如意，所以就自己捣鼓琢磨了一下，可算是捣鼓出来啦，所以回顾一下过程。</p><p>🐱 音频转波形图的实现方式有很多种，并不唯一。</p><h3 id="需求分析">需求分析</h3><p>​    简单描述一下就是需要将音频文件实时的转换成音频波形图呈现出来，我这里也没有找到什么很好的库，所以就自己参考着资料实现了一下。</p><p>效果的话，还算可以的吧。哈哈。</p><p>​    预览效果如下所示：</p><p><img src="../post_img/vue-audio/audio.gif" alt=""><br><img src="../post_img/vue-audio/audio_exp.png" style="zoom:67%;" /></p><h3 id="实现">实现</h3><p>​下面来看看我的实现代码吧~<code>useAudioVisualizer.js</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AudioVisualizer</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">audioUrl, canvas</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">audioUrl</span> = audioUrl;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">canvas</span> = canvas;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">context</span> = <span class="title function_">new</span>(<span class="variable language_">window</span>.<span class="property">AudioContext</span> || <span class="variable language_">window</span>.<span class="property">webkitAudioContext</span>)();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">bufferSize</span> = <span class="number">4096</span>; <span class="comment">// 缓冲区大小</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">processor</span> = <span class="variable language_">this</span>.<span class="property">context</span>.<span class="title function_">createScriptProcessor</span>(<span class="variable language_">this</span>.<span class="property">bufferSize</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">init</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="variable language_">this</span>.<span class="property">audioUrl</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!response.<span class="property">ok</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`响应超时: <span class="subst">$&#123;response.status&#125;</span>`</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">const</span> arrayBuffer = <span class="keyword">await</span> response.<span class="title function_">arrayBuffer</span>();</span><br><span class="line">            <span class="keyword">const</span> audioBuffer = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">context</span>.<span class="title function_">decodeAudioData</span>(arrayBuffer);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">setupProcessor</span>(audioBuffer);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;音频加载失败:&#x27;</span>, error);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">setupProcessor</span>(<span class="params">audioBuffer</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> source = <span class="variable language_">this</span>.<span class="property">context</span>.<span class="title function_">createBufferSource</span>();</span><br><span class="line">        source.<span class="property">buffer</span> = audioBuffer;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 处理每个音频块</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">processor</span>.<span class="property">onaudioprocess</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">draw</span>(e.<span class="property">inputBuffer</span>.<span class="title function_">getChannelData</span>(<span class="number">0</span>));</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        source.<span class="title function_">connect</span>(<span class="variable language_">this</span>.<span class="property">processor</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">processor</span>.<span class="title function_">connect</span>(<span class="variable language_">this</span>.<span class="property">context</span>.<span class="property">destination</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 启动 AudioContext</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">context</span>.<span class="property">state</span> === <span class="string">&#x27;suspended&#x27;</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">context</span>.<span class="title function_">resume</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        source.<span class="title function_">start</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">draw</span>(<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> canvasCtx = <span class="variable language_">this</span>.<span class="property">canvas</span>.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line">        <span class="keyword">const</span> &#123;</span><br><span class="line">            width,</span><br><span class="line">            height</span><br><span class="line">        &#125; = <span class="variable language_">this</span>.<span class="property">canvas</span>;</span><br><span class="line"></span><br><span class="line">        canvasCtx.<span class="property">fillStyle</span> = <span class="string">&#x27;#000000&#x27;</span>;</span><br><span class="line">        canvasCtx.<span class="title function_">fillRect</span>(<span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line"></span><br><span class="line">        canvasCtx.<span class="property">lineWidth</span> = <span class="number">2</span>;</span><br><span class="line">        canvasCtx.<span class="property">strokeStyle</span> = <span class="string">&#x27;#00ff00&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        canvasCtx.<span class="title function_">beginPath</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> sliceWidth = width * <span class="number">1.0</span> / data.<span class="property">length</span>;</span><br><span class="line">        <span class="keyword">let</span> x = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; data.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">const</span> v = data[i] * <span class="number">0.5</span> + <span class="number">0.5</span>; <span class="comment">// 确保波形图垂直居中</span></span><br><span class="line">            <span class="keyword">const</span> y = v * height;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (i === <span class="number">0</span>) &#123;</span><br><span class="line">                canvasCtx.<span class="title function_">moveTo</span>(x, y);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                canvasCtx.<span class="title function_">lineTo</span>(x, y);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            x += sliceWidth;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        canvasCtx.<span class="title function_">lineTo</span>(<span class="variable language_">this</span>.<span class="property">canvas</span>.<span class="property">width</span>, <span class="variable language_">this</span>.<span class="property">canvas</span>.<span class="property">height</span> / <span class="number">2</span>);</span><br><span class="line">        canvasCtx.<span class="title function_">stroke</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">AudioVisualizer</span>;</span><br></pre></td></tr></table></figure><ol><li><strong>构造函数：</strong><ul><li>接收两个参数，<code>audioUrl</code> 表示音频文件的 URL，<code>canvas</code> 表示用于绘制波形图的 Canvas 元素。</li><li>创建一个 AudioContext 对象，用于处理音频相关的操作。</li><li>定义了缓冲区大小 <code>bufferSize</code> 和一个 <code>ScriptProcessorNode</code> 对象 <code>processor</code>，用于处理音频数据。</li></ul></li><li><strong><code>init</code> 方法：</strong><ul><li>通过 <code>fetch</code> 获取音频文件。</li><li>将获取到的音频文件数据转换成 <code>arrayBuffer</code>。</li><li>使用 <code>decodeAudioData</code> 方法将 <code>arrayBuffer</code> 转换为音频缓冲区（<code>audioBuffer</code>）。</li><li>调用 <code>setupProcessor</code> 方法进行音频处理。</li></ul></li><li><strong><code>setupProcessor</code> 方法：</strong><ul><li>创建一个音频源节点 <code>source</code>，将音频缓冲区设置为该节点的缓冲区。</li><li>设置 <code>processor</code> 的 <code>onaudioprocess</code> 事件处理器，该处理器在每个音频块处理时调用 <code>draw</code> 方法。</li><li>将音频源节点和 <code>processor</code> 连接，并将 <code>processor</code> 连接到音频目的地（<code>context.destination</code>）。</li><li>如果 <code>AudioContext</code> 的状态是 <code>'suspended'</code>，则通过调用 <code>resume</code> 方法启动 <code>AudioContext</code>。</li><li>启动音频源节点。</li></ul></li><li><strong><code>draw</code> 方法：</strong><ul><li>获取 Canvas 2D 上下文。</li><li>用黑色填充整个 Canvas。</li><li>设置线条样式，包括线条颜色、宽度等。</li><li>遍历音频数据，通过绘制路径形成波形图。</li></ul></li></ol><p>​    整体流程是：加载音频文件，将其解码成音频缓冲区，通过 <code>ScriptProcessorNode</code> 处理音频数据，将处理后的数据传递给 <code>draw</code> 方法进行绘制，最终呈现为波形图</p><p>​    这样一来就可以实现一个音频转波形图的效果啦~</p><p>​<sub>tips：咳咳，分析是我偷懒喂给chatGPT做哒，有问题的话请留言。skr~</sub></p><hr><p>​    咳咳~好啦，直截了当简单明了！可能存在不足，不过我会不断进步！Fighting！！！觉得有用的话，请慷慨留下您的赞赏吧<sub>好不好嘛，行不行嘛，你最好啦，谢谢你啦</sub>。我是苏苏，一枚二次元码农🌺。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> vue3 </category>
          
          <category> audio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue3 </tag>
            
            <tag> audio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我曾见过风</title>
      <link href="/post/73f0ace9.html"/>
      <url>/post/73f0ace9.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>🎀 哈喽，这里是苏苏吖~，苏苏又来更新文章啦！月光洒落窗台，有人得诗，有人得词，有人做文，有人谱曲…</p></blockquote><hr><p style="text-align: center; font-size:20px; font-weight: bold;">我曾见过风</p><p>​秋天，风是大地上的旋律，是微妙的情感在空气中流转。我曾见过风，见过它在秋叶间舞动，如一位优雅的舞者，将金黄的叶片轻轻抚摸。那轻柔的触感仿佛是大自然的温柔，用颤动的树叶述说着秋天的故事。</p><p>​漫步在小径上，我感受到风的微风，轻拂着脸庞，如同柔软的羽毛轻轻触摸。枫叶纷纷飘落，随风而舞，如同一场自然的独舞。我曾见过风，吹拂过金黄的麦浪，让我感受到大地的丰收和生机。那一片片金黄，在风的引领下，跳动着宁静而又充实的乐章。</p><p>​我曾见过风，穿越城市的高楼大厦，它在城市中流动，扬起街头的尘埃，却又带着清新的空气。风是城市中的音符，吹散了喧嚣，带来了宁静。我在楼顶眺望，看着远处的云卷云舒，感受到风带给城市的生命力。</p><p>​山间，风吹草动，传来山花的芬芳。我曾站在山巅，俯瞰千山万水，感受到风的力量。风是山的诗，吹拂过每一片叶子，弹奏着大地的交响乐。我曾见过风，吹拂过湖面，湖水泛起涟漪，如同风在水面轻轻流淌。风与水交融，勾勒出一幅宁静而深邃的画卷。</p><p>​秋天的风，是大自然的笔触，勾勒出大地五彩斑斓的画卷。我曾见过风，见过它在不同场景中展现的多彩面貌。无论是在山野、城市、湖畔，风都是秋天的使者，将大地的美丽传递给每一个细心品味的灵魂。秋风，是一首悠扬的诗，是一幅抽象的画，只有用心感受，方能领略到其中的深邃与美好。</p><hr><p>​云卷云舒，花开花败，风起风止，很庆幸我能感受，很庆幸我曾见过······</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小雪</title>
      <link href="/post/503377e3.html"/>
      <url>/post/503377e3.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>🎀 哈喽，这里是苏苏吖~，苏苏又来更新文章啦！月光洒落窗台，有人得诗，有人得词，有人做文，有人谱曲…</p></blockquote><hr><p style="text-align: center; font-size:20px; font-weight: bold;">小雪</p><p>​在小雪的时节，世界仿佛进入了一场梦幻的画卷。雪花纷纷扬扬地飘洒而下，翩翩起舞，轻柔地覆盖着大地，勾勒出一片银白的童话。这是大自然的魔法，一种不经意间的神奇，将平凡的景色点缀得如诗如画。</p><p>​窗外，一片宁静。树梢上挂满了晶莹的雪珠，屋檐上铺满了银色的雪翘。整个世界都沉浸在这片宁谧的白色世界中，仿佛时间在这一刻凝固。寒冷的空气中，弥漫着雪的清新味道，让人心旷神怡。</p><p>​小雪是季节的过渡，是冬天的序曲。大地渐渐冷却，冰雪的覆盖让人感受到一种宁静而祥和的氛围。寒风呼啸，却也带着冬日的温柔。这时节，家中的暖意格外珍贵，让人愿意静下心来，品味生活的美好。</p><p>​走进乡间，田野在小雪的滋润下显得格外宁静。麦田已然金黄，雪花点缀在麦穗上，宛如珍珠般闪烁。农民们忙碌着，为冬季的来临做着准备，而这一片宁静的田园画卷，也是他们勤劳的见证。</p><p>​小雪是一场自然的盛宴，是生命的细腻之处。每一片雪花都是独一无二的艺术品，它们在空中飘舞，轻盈而灵动，如同天使的芬芳。抬头仰望，雪花在寂静的夜空中翩然飘舞，如同星星闪烁，照亮了整个冬夜。</p><p>​在这个小雪的时节，时间仿佛变得缓慢而安详。人们可以放下手中的繁琐，放慢脚步，与家人朋友围坐在一起，共享温馨。点一盏香茗，感受茶香在口腔中弥漫，思绪也跟着变得宁静而悠远。</p><p>​小雪，是一个让人陶醉的季节，是冬天的序曲，是大自然的交响乐。在这个时节，让我们敞开心扉，感受自然的馈赠，沉浸在冬日的温暖和宁静中，品味生命的美好。或许，在这片银装素裹的世界里，我们能够找到属于自己的一片宁静角落，让心灵在小雪的时光里得到净化和滋养。</p><hr><p>​在小雪的柔情里，大地如梦如画。雪花飘洒，勾勒出银白童话，宁静而祥和。这时节，冬日的温柔渗透进每寸空气，让人沉浸在自然的魔法中。小雪，是心灵的治愈，是冬季的温暖序曲，也是生命细腻的一抹画卷，使时间慢了下来，慢了下来······</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Hexo搭建个人博客（四）</title>
      <link href="/post/hexo_butterfly_4.html"/>
      <url>/post/hexo_butterfly_4.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> hexo </category>
          
          <category> butterfly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Hexo搭建个人博客（五）</title>
      <link href="/post/hexo_butterfly_5.html"/>
      <url>/post/hexo_butterfly_5.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> hexo </category>
          
          <category> butterfly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Hexo搭建个人博客（二）</title>
      <link href="/post/hexo_butterfly_2.html"/>
      <url>/post/hexo_butterfly_2.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>哈喽，这里是苏苏吖~，在上篇文章中已经将搭建博客所需要的环境搭建完毕，接下开始创建项目，开始啦！</p><blockquote><p>🌼 注：在进行下文的步骤时，请先确保已经按照上篇文章的步骤操作完成。</p><ul><li><a href="https://luckysusu.top/post/hexo_butterfly_1.html">基于Hexo搭建个人博客（一） | 苏苏の休憩小屋 (luckysusu.top)</a></li></ul></blockquote><h2 id="创建项目">创建项目</h2><p>1、新建一个文件夹用于存放博客文件，然后在文件夹中打开Windows Power Shell窗口，输入<code>hexo init</code>命令初始化项目。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo init 项目名</span><br></pre></td></tr></table></figure><img src="../post_img/butterfly-img/hexo-init_proj.png" style="zoom:67%;" /><p>2、项目初始化完成后，通过vs code打开demo文件，ctrl+~打开控制台面板，输入<code>npm install</code>安装项目所需依赖</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install</span><br></pre></td></tr></table></figure><p>3、项目依赖安装完成后，可以查看目前的文件目录结构</p><img src="../post_img/butterfly-img/hexo-file-1697440593631-17.png" style="zoom:67%;" /><ul><li><mark>.github</mark>：git相关文件</li><li><mark>node_modules</mark>：项目依赖包</li><li><mark>scaffolds</mark>：文章模版</li><li><mark>source</mark>：文章文件和文章资源文件</li><li><mark>theme</mark>：主题</li><li><mark>_config.landscape.yml</mark>：主题配置文件</li><li><mark>_config.yml</mark>：根配置文件</li><li><mark>package.json</mark>：项目描述等信息</li></ul><p>4、运行<code>hexo server</code>启动项目</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><img src="../post_img/butterfly-img/hexo-init_start.png" style="zoom:67%;" /><p>5、项目启动后，访问<code>http://localhost:4000/</code>即可预览效果。</p><img src="../post_img/butterfly-img/hexo-init_home.png" style="zoom:67%;" /><h2 id="挂载项目">挂载项目</h2><h3 id="安装hexo-deployer-git">安装<code>hexo-deployer-git</code></h3><p>在项目终端运行命令<mark>npm install hexo-deployer-git --save</mark></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h3 id="修改-config-yml文件">修改<code>_config.yml</code>文件</h3><p>打开项目的根配置文件<code>-config.yml</code>，拖到最下面，修改<code>deploy</code>的内容。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">&#x27;git&#x27;</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">&lt;仓库的ssh地址&gt;</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure><h3 id="部署到GitHub">部署到GitHub</h3><p>配置修改完成后，终端运行下面的命令，将代码挂载到GitHub</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean  //删除之前生成的文件</span><br><span class="line">$ hexo generate   //重新生成public文件，等价于$ hexo g</span><br><span class="line">$ hexo deploy   //部署到GitHub `第一次deploy时可能会需要输入username和password`</span><br></pre></td></tr></table></figure><img src="../post_img/butterfly-img/hexo-deploy_done.png" style="zoom:67%;" /><p>当出现<code>deploy done：git</code>时则代表部署成功，就可以通过<mark><a href="https://susu147226.github.io">https://susu147226.github.io</a></mark>访问博客内容。</p><h2 id="设置域名（可选）">设置域名（可选）</h2><h2 id="安装主题">安装主题</h2><blockquote><p>🌸 hexo有自带主题，不过官方的主题往往不是那么好用，因此，在官网也有很多作者提供了许多的开源主题。感兴趣可以前往官网查看。<a href="https://hexo.io/themes/">Themes | Hexo</a></p><p>🌺 本站使用的主题为<a href="https://github.com/jerryc127/hexo-theme-butterfly">🦋 hexo-theme-butterfly: </a>，目前已经升级到<code>v4.10</code>，后续的所有内容均会围绕该主题展开</p></blockquote><h3 id="下载主题（以butterfly主题为例）">下载主题（以butterfly主题为例）</h3><blockquote><p>🍃 下面提供四种方式下载安装主题</p></blockquote><h4 id="npm安装">npm安装</h4><p>在vs code打开博客文件夹，<code>ctrl+~</code>打开终端，输入<code>npm i hexo-theme-butterfly</code>安装主题</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm i hexo-theme-butterfly</span><br></pre></td></tr></table></figure><img src="../post_img/butterfly-img/butterfly-setup_npm.png" style="zoom:67%;" /><p>安装完成后就可以在<code>node_module</code>文件夹中找到<code>hexo-theme-butterfly</code></p><blockquote><p>🍒 主题升级：在终端运行<code>npm update hexo-theme-butterfly</code>即可，但在升级前需先备份主题配置文件<code>_config.yml</code>，npm会直接覆盖掉。</p></blockquote><h4 id="git（Github）安装">git（Github）安装</h4><p>在博客文件夹下打开<code>git bash</code>，输入<code>git clone git@github.com:jerryc127/hexo-theme-butterfly.git</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git@github.com:jerryc127/hexo-theme-butterfly.git</span><br></pre></td></tr></table></figure><img src="../post_img/butterfly-img/butterfly-setup_github.png" style="zoom:67%;" /><img src="../post_img/butterfly-img/butterfly-setup_github1.png" style="zoom:67%;" /><p>安装完成后就可以在博客目录下找到<code>hexo-theme-butterfly</code>文件夹，然后将它<mark>重命名为butterfly</mark>后移到<code>themes</code>文件夹下。</p><img src="../post_img/butterfly-img/butterfly-setup_github2.png" style="zoom:67%;" /><blockquote><p>🍒 主题升级：在主题的目录下，运行<code>git pull</code>即可</p></blockquote><h4 id="git（Gitee）安装">git（Gitee）安装</h4><p>在博客文件夹下打开<code>git bash</code>，输入<code>git clone https://gitee.com/immyw/hexo-theme-butterfly.git</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://gitee.com/immyw/hexo-theme-butterfly.git</span><br></pre></td></tr></table></figure><img src="../post_img/butterfly-img/butterfly-setup_gitee.png" style="zoom:67%;" /><p>后续步骤与github安装方式相同，此处不再赘述。</p><blockquote><p>🍒 主题升级：在主题的目录下，运行<code>git pull</code>即可</p></blockquote><h4 id="http下载压缩包">http下载压缩包</h4><p>打开butterfly主题的仓库地址<a href="https://github.com/jerryc127/hexo-theme-butterfly">🦋 hexo-theme-butterfly: </a>,通过http下载压缩包。</p><img src="../post_img/butterfly-img/butterfly-setup_http.png" style="zoom:67%;" /><p>下载完成后解压，同理解压后的文件重命名并放入themes文件夹下。</p><blockquote><p>🍒 主题升级：在主题的目录下，运行<code>git pull</code>即可</p></blockquote><h3 id="主题应用">主题应用</h3><p>修改博客文件下的<code>根配置文件_config.yml</code>。将<mark>theme: landscape修改为theme: butterfly</mark></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">theme:</span> <span class="string">landscape</span></span><br><span class="line"><span class="string">+</span> <span class="attr">theme:</span> <span class="string">butterfly</span></span><br></pre></td></tr></table></figure><h3 id="插件安装">插件安装</h3><p>为<code>.pug</code>和<code>.stylus</code>文件安装对应渲染器。终端输入<code>npm install hexo-renderer-pug hexo-renderer-stylus --save</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><h3 id="升级推荐">升级推荐</h3><p>将主题文件夹中的<code>_config.yml</code>复制到Hexo根目录里，并重命名为<code> _config.butterfly.yml</code>。后续只在<code> _config.butterfly.yml</code>进行配置就行。Hexo会自动合并主题中的<code>_config.yml</code>和<code> _config.butterfly.yml</code>里的配置，如果存在同名配置，会使用<code>_config.butterfly.yml</code>的配置，其优先度较高。</p><img src="../post_img/butterfly-img/butterfly-config_rename.png" style="zoom:67%;" /><hr><p>欧克克，项目，（域名）[可选]，主题都准备好啦，就可以开始配置啦🎉🎉🎉，这里是苏苏吖~，如有疑问请留言，有不对的地方也欢迎留言指正。Thanks♪(･ω･)ﾉ</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> hexo </category>
          
          <category> butterfly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Hexo搭建个人博客（三）</title>
      <link href="/post/hexo_butterfly_3.html"/>
      <url>/post/hexo_butterfly_3.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>哈喽，这里是苏苏吖~，在上篇文章中已经将项目，（域名）[可选]，主题都准备好啦，接下来开始基础配置吧，开始啦！</p><blockquote><p>🌼 注：在进行下文的步骤时，请先确保已经按照前文的步骤操作完成。</p><ul><li><a href="https://luckysusu.top/post/hexo_butterfly_1.html">基于Hexo搭建个人博客（一） | 苏苏の休憩小屋 (luckysusu.top)</a></li><li><a href="https://luckysusu.top/post/hexo_butterfly_2.html">基于Hexo搭建个人博客（二） | 苏苏の休憩小屋 (luckysusu.top)</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> hexo </category>
          
          <category> butterfly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Hexo搭建个人博客（一）</title>
      <link href="/post/hexo_butterfly_1.html"/>
      <url>/post/hexo_butterfly_1.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>哈喽，这里是苏苏吖~，从这篇文章开始，会一一开始回顾苏苏通过Hexo搭建个人博客的全过程，期间遇见的一些bug及解决方式也会逐一描述，那么，话不多说，开始搭建个人博客啦。</p><blockquote><p>🍀 接下来的搭建主要面对Windows系统。因为苏苏在搭建过程中使用的也是Windows系统。</p></blockquote><h2 id="环境预设">环境预设</h2><p>博客搭建环境如下：</p><ul><li>操作系统：Windows10&amp;Windows11</li><li>Node.js</li><li>Git</li><li>博客框架：Hexo</li><li>编辑器：Visual Studio Code（Webstorm亦可）</li><li>静态部署：GitHub&amp;&amp;Gitee均可</li><li>服务器：阿里云服务器&amp;腾讯云服务器（可选，有服务器需备案）</li><li>域名：推荐阿里万网注册（可选，github部署或Gitee部署均提供了访问地址，域名可配可不配）</li></ul><h2 id="Node-js安装">Node.js安装</h2><div class="tabs" id="test1"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test1-1">nvm安装</button><button type="button" class="tab " data-href="test1-2">普通安装</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><blockquote><p>🍓 nvm安装方式请参见文章：<a href="https://luckysusu.top/post/nvm_nodejs.html">nvm-nodejs版本控制工具 | 苏苏の休憩小屋 (luckysusu.top)</a></p></blockquote></div><div class="tab-item-content" id="test1-2"><blockquote><p>🍓 普通安装方式较为简单，在node.js官网下载LTS的版本压缩包或exe文件安装即可，安装 完成后同理通过<code>node -v</code>检查版本是否安装正确，<code>npm -v</code>查看npm版本。推荐通过nvm方式安装node，便于版本控制。</p></blockquote></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="Hexo框架安装">Hexo框架安装</h2><p>打开Windows Power Shell，输入<code>npm install -g hexo-cli</code>全局安装hexo框架。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>完成安装后，输入<code>hexo -v</code>验证是否安装完成以及查看安装的版本号。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo -v</span><br></pre></td></tr></table></figure><img src="../post_img/json-server/hexo-v_cmd.png" style="zoom:67%;" /><h2 id="注册-创建GitHub仓库">注册&amp;创建GitHub仓库</h2><blockquote><p>🐇 GitHub注册此处不做展开，英语水平一般的话请打开网页翻译后注册，与寻常网站注册步骤差不多。</p></blockquote><h3 id="创建GitHub仓库">创建GitHub仓库</h3><p>账号注册完成后，点击右上角头像旁的 <code>+</code> 按钮，选择<mark>New repository</mark>，创建一个名为<mark>&lt;用户名&gt;.github.io</mark>的仓库。</p><img src="../post_img/json-server/github-new_repo.png" style="zoom:67%;" /><img src="../post_img/json-server/github-new_repo1.png" style="zoom:67%;" /><blockquote><p>🌺 注意：</p><p>1、在创建仓库时，仓库名称必须为<code>&lt;用户名&gt;.github.io</code></p><p>2、Description为仓库描述，可选填</p></blockquote><h2 id="Git安装及连接GitHub">Git安装及连接GitHub</h2><blockquote><p>🍃 Git安装的详细步骤教程和配置部分，请参见：</p></blockquote><h3 id="生成ssh公钥连接GitHub">生成ssh公钥连接GitHub</h3><p>在打开的<code>Git bash</code>面板中输入命令：<mark>ssh-keygen -t rsa -C “邮箱”</mark></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">&#x27;邮箱&#x27;</span></span><br></pre></td></tr></table></figure><img src="../post_img/json-server/ssh%E7%94%9F%E6%88%90%E5%AF%86%E9%92%A5.png" style="zoom:67%;" /><p>完成后可在对应目录打开<code>id_rsa.pub</code>文件，文件中会看到以下示例内容：</p><img src="../post_img/json-server/ssh-file.png" style="zoom:67%;" /><p>将上述文件中的内容复制一份，然后返回github。按下列步骤操作配置ssh公钥</p><img src="../post_img/json-server/github-setting_ssh.png" style="zoom:67%;" /><img src="../post_img/json-server/github-setting_ssh1.png" style="zoom:67%;" /><img src="../post_img/json-server/github-setting_ssh2.png" style="zoom:67%;" /><p>完成上述三步操作后，在git bash输入<code>ssh -T git@github.com</code>验证是否连接成功</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>结果如下则表示连接成功。</p><img src="../post_img/json-server/ssh%E9%AA%8C%E8%AF%81-1697426073309-10.png" style="zoom:67%;" /><p>完成上述准备工作后，就可以开始正式搭建专属于你自己的个人博客啦。</p><hr><p>好啦，关于环境搭建与一些准备工作的内容到此结束啦🎉🎉🎉，这里是苏苏吖~，如有疑问请留言，有不对的地方也欢迎留言指正。Thanks♪(･ω･)ﾉ</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> hexo </category>
          
          <category> butterfly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nvm-nodejs版本控制工具</title>
      <link href="/post/nvm_nodejs.html"/>
      <url>/post/nvm_nodejs.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>由于node.js版本一直处于迭代更新状态，而工作中的node.js的版本需求又会因项目不用而存在差异，因此，nvm对于一位前端工作者来说是在太好用了。<br><mark>nvm</mark> 全称 node.js version manage，是一个node.js的版本管理工具包，可以便捷安装和切换不同版本的node.js。</p></blockquote><h2 id="安装nvm">安装nvm</h2><h3 id="下载nvm">下载nvm</h3><blockquote><p>需要注意的是，nvm的版本截止本文发布时已更新到V1.1.11版本，本文介绍的nvm版本也是基于此版本，后续不再解释版本。</p></blockquote><p>下载地址：<a href="https://github.com/coreybutler/nvm-windows/releases">Releases · coreybutler/nvm-windows (github.com)</a>，此地址是github上的nvm-windows官方下载地址，如无梯子，请移步下面的下载方式</p><img src="../post_img/nvm-img/image-20231009165050091.png" alt="image-20231009165050091" style="zoom:67%;" /><p>下载地址：<a href="https://pan.baidu.com/s/1MxC2KH2Cf4Oe5VCnRClyjQ?pwd=susu">https://pan.baidu.com/s/1MxC2KH2Cf4Oe5VCnRClyjQ?pwd=susu</a>   提取码：susu</p><h3 id="安装nvm-v2">安装nvm</h3><blockquote><p>此处分为两种，</p><ul><li>如果有梯子在官网下载的nvm-setup.exe，请直接点击安装</li><li>如果没有梯子，下载的压缩包，请先解压，然后运行nvm-setup.exe</li></ul></blockquote><p>双击运行安装程序后，按如下步骤进行即可：</p><img src="../post_img/nvm-img/image-20231009165653996.png" alt="image-20231009165653996" style="zoom: 67%;" /><p>然后选择安装路径，路径可根据自己需求决定是否更改。然后next即可完成安装。</p><img src="../post_img/nvm-img/image-20231009165822394.png" alt="image-20231009165822394" style="zoom:67%;" /><h3 id="检查是否安装成功">检查是否安装成功</h3><p>打开windows power shell，，输入 <mark>nvm -v</mark>查看版本，得到版本号的反馈即表明安装成功，可以开始node版本切换操作啦。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ nvm -v</span><br></pre></td></tr></table></figure><img src="../post_img/nvm-img/image-20231009171001106.png" alt="image-20231009171001106" style="zoom:67%;" /><blockquote><p>说明：我的版本是八月份左右安装的，后面没有管更新，因此版本号是1.1.10。后面会说明如何更新</p></blockquote><h2 id="nvm安装node-js">nvm安装node.js</h2><h3 id="安装node-js">安装node.js</h3><p>在按照上述步骤安装完成nvm后，就可以开始安装node.js了。</p><blockquote><p>注意：安装node.js之前，请务必先去<a href="https://nodejs.org/zh-cn">node.js官网</a>查看版本，尽量不要选择安装最新版。选择长期维护版更适合。最新版偶尔会出现一些小问题。</p></blockquote><h4 id="打开windows-power-shell，输入-mark-nvm-list-available-mark-查看node-js的所有可下载版本。">打开windows power shell，输入<mark>nvm list available</mark>查看node.js的所有可下载版本。</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ nvm list available</span><br></pre></td></tr></table></figure><img src="../post_img/nvm-img/image-20231009172351803.png" alt="image-20231009172351803" style="zoom:67%;" /><h4 id="选择列表中一个版本，输入-mark-nvm-install-版本号-mark">选择列表中一个版本，输入 <mark>nvm install [版本号] </mark></h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ nvm install [版本号]   //如：nvm install 18.18.0</span><br></pre></td></tr></table></figure><img src="../post_img/nvm-img/image-20231009172705547.png" alt="image-20231009172705547" style="zoom: 67%;" /><h4 id="检查node-js和npm是否已安装完成可以使用">检查node.js和npm是否已安装完成可以使用</h4><p>打开Windows power shell，在控制台输入<mark>node -v</mark>，<mark>npm -v</mark> 查看node.js版本和npm版本</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ node -v</span><br><span class="line">$ npm -v</span><br></pre></td></tr></table></figure><img src="../post_img/nvm-img/image-20231009173400567.png" alt="image-20231009173400567" style="zoom:67%;" /><blockquote><p>考虑到可能有的小伙伴会了解到yarn，在nodejs安装完成后，通过node.js就可以安装yarn，此处仅提供安装命令，不提供图片演示。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install yarn -g</span><br></pre></td></tr></table></figure><p>安装完成后，通过yarn -v查看版本即可验证是否安装完成</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yarn -v</span><br></pre></td></tr></table></figure></blockquote><h4 id="查看已安装的node-js版本">查看已安装的node.js版本</h4><p>打开Windows power shell，输入<mark>nvm ls</mark>即可查看当前安装的所有版本的node.js以及当前正在使用的node.js版本。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ nvm <span class="built_in">ls</span></span><br></pre></td></tr></table></figure><img src="../post_img/nvm-img/image-20231009173012894.png" alt="image-20231009173012894" style="zoom:67%;" /><h2 id="nvm常用命令">nvm常用命令</h2><p>话不多说，上表格！常用命令见下表：</p><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center"><mark>$ nvm list</mark></td><td style="text-align:center">查看当前已安装的node版本</td></tr><tr><td style="text-align:center"><mark>$ nvm list available</mark></td><td style="text-align:center">查看网络可以安装的node版本</td></tr><tr><td style="text-align:center"><mark>$ nvm arch [32 | 64]</mark></td><td style="text-align:center">显示node是在32位还是64位模式下运行</td></tr><tr><td style="text-align:center"><mark>$ nvm install [arch]</mark></td><td style="text-align:center">安装制定版本的node.js</td></tr><tr><td style="text-align:center"><mark>$ nvm use <version> [arch]</mark></td><td style="text-align:center">切换到使用指定版本</td></tr><tr><td style="text-align:center"><mark>$ nvm uninstall <version></mark></td><td style="text-align:center">卸载制定的node.js版本</td></tr><tr><td style="text-align:center"><mark>$ nvm on</mark></td><td style="text-align:center">开启node.js版本管理</td></tr><tr><td style="text-align:center"><mark>$ nvm off</mark></td><td style="text-align:center">关闭node.js版本管理</td></tr><tr><td style="text-align:center"><mark>$ nvm root [path]</mark></td><td style="text-align:center">设置nvm应存储不同版本的node.js的目录，留空显示当前根目录</td></tr><tr><td style="text-align:center"><mark>$ nvm proxy [url]</mark></td><td style="text-align:center">设置用于下载的代理，留空查看当前代理，设置为&quot;null&quot;删除代理</td></tr></tbody></table><h2 id="nvm更新">nvm更新</h2><p>okk，来啦来啦，此处借用官方原话：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">As of v1.1.8, there is an upgrade utility that will automate the upgrade process.</span><br><span class="line">To upgrade nvm-windows, run the new installer. It will safely overwrite the files it needs to update without touching your node.js installations. Make sure you use the same installation and symlink folder. If you originally installed to the default locations, you just need to click &quot;next&quot; on each window until it finishes.</span><br></pre></td></tr></table></figure><blockquote><p>简单理解一下，就是从nvm1.1.8版本以后，如果需要更新新版本的nvm，只需要下载好新版本的nvm安装程序以后运行就好，但是要注意，安装目录应和旧版本一致，node.js的存放位置也应一致，否则，会导致node.js报错</p></blockquote><hr><p>好啦，关于nvm——node.js版本管理工具的内容到这里就结束啦，文章内容如果有不对的地方，欢迎留言，苏苏看到以后会第一时间回复哒，Thanks♪(･ω･)ﾉ~</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 前端 </category>
          
          <category> nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何手撸一个echarts图表组件</title>
      <link href="/post/vue_echarts.html"/>
      <url>/post/vue_echarts.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>哈喽！这里是苏苏吖~，最近在做项目时，遇到很多图形图表的应用，但是一个一个的去引用显得好笨，再请教了 <a href="https://fe32.top">唐志远</a> 大佬后得到一些感悟，在这里再次回顾一下封装的过程。</p><p>🐱 封装方式有很多种，我所做的封装仅仅是方便我自己在项目中使用，所以主要以记录为主，讲解不多。见谅</p><h3 id="开始之前">开始之前</h3><p>​    首先，虽然说是在vue3的项目中做的封装，但是基本的封装逻辑是大差不差的。而在我接下来的封装中，封装的逻辑基本是按照 <code>引入依赖</code>——<code>创建钩子函数</code>——<code>定义响应式引用</code>——<code>定义渲染函数</code>——<code>返回对应对象</code> 来进行的。</p><p>​    好啦，请确保已经创建好项目，并安装好了依赖，此处封装的图表库依赖来源于<a href="https://echarts.apache.org/">Echarts</a>图形图表库</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install echarts --save</span><br></pre></td></tr></table></figure><h3 id="正式开始">正式开始</h3><blockquote><p>不说废话，直接上代码！</p></blockquote><p>首先是<code>useEcharts</code>函数。<code>useEcharts.js</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> echarts <span class="keyword">from</span> <span class="string">&#x27;echarts&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义useEcharts函数，接受chartDom和options两个参数。为什么传入options参数可以看看echarts官方文档。</span></span><br><span class="line"><span class="comment">//因为每个图表显示的什么图主要就是由options的配置来决定。</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">useECharts</span>(<span class="params">chartDom, options</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> chartInstance = <span class="title function_">ref</span>(<span class="literal">null</span>); <span class="comment">// 响应式引用</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">renderChart</span> = (<span class="params"></span>) =&gt; &#123; <span class="comment">//renderchart函数用于渲染图表</span></span><br><span class="line">        <span class="keyword">if</span> (!chartInstance.<span class="property">value</span>) &#123;</span><br><span class="line">            chartInstance.<span class="property">value</span> = echarts.<span class="title function_">init</span>(chartDom.<span class="property">value</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        chartInstance.<span class="property">value</span>.<span class="title function_">setOption</span>(options);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        chartInstance,</span><br><span class="line">        renderChart,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义通用组件模版<code>Echarts.vue</code></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 定义div元素作为图标容器，通过ref获取元素，:style响应式样式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&quot;chart&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;&#123; width: width, height: height &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref, onMounted, onUnmounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> useECharts <span class="keyword">from</span> <span class="string">&#x27;@/hooks/useECharts&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">props</span>: &#123; <span class="comment">//用于配置图表的选项以及指定图标容器的宽高</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">chartOptions</span>: <span class="title class_">Object</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">width</span>: <span class="title class_">String</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="title class_">String</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">setup</span>(<span class="params">props</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> chart = <span class="title function_">ref</span>(<span class="literal">null</span>); <span class="comment">//通过ref获取页面元素</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> &#123; chartInstance, renderChart &#125; = <span class="title function_">useECharts</span>(chart, props.<span class="property">chartOptions</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">renderChart</span>(); <span class="comment">//在onMounted钩子中调用renderChart函数渲染图标</span></span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">onUnmounted</span>(<span class="function">() =&gt;</span> &#123; <span class="comment">//在onUmmounted钩子中，当组件销毁时，判断图标是否存在。如果存在的调用dispose清理</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (chartInstance.<span class="property">value</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//解释一下为什么会有dispose方法。因为echarts.init返回的实例已经有 dispose方法了。</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//所以，只需要直接调用chartInstance.value.dispose()就行 </span></span></span><br><span class="line"><span class="language-javascript">                chartInstance.<span class="property">value</span>.<span class="title function_">dispose</span>();</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            chart,</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>真正的使用页面：<code>demo.vue</code></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-card</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> #<span class="attr">header</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;font-semibold&quot;</span>&gt;</span>设备状态<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Echarts</span> <span class="attr">:chartOptions</span>=<span class="string">&quot;chartOptions&quot;</span> <span class="attr">:width</span>=<span class="string">&quot;chartWidth&quot;</span> <span class="attr">:height</span>=<span class="string">&quot;chartHeight&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Echarts</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-card</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Echarts</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/Echarts.vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> chartWidth = <span class="title function_">ref</span>(<span class="string">&#x27;100%&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> chartHeight = <span class="title function_">ref</span>(<span class="string">&#x27;320px&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> chartOptions = &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">tooltip</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">trigger</span>: <span class="string">&#x27;item&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">legend</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">left</span>: <span class="string">&#x27;center&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">series</span>: [</span></span><br><span class="line"><span class="language-javascript">        &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="string">&#x27;设备状态&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">type</span>: <span class="string">&#x27;pie&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">radius</span>: [<span class="string">&#x27;25%&#x27;</span>, <span class="string">&#x27;75%&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">avoidLabelOverlap</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">itemStyle</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">borderRadius</span>: <span class="number">8</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">borderColor</span>: <span class="string">&#x27;#fff&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">borderWidth</span>: <span class="number">2</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">label</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">show</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">position</span>: <span class="string">&#x27;center&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">emphasis</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">label</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">show</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">fontSize</span>: <span class="string">&#x27;20&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">fontWeight</span>: <span class="string">&#x27;bold&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">labelLine</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">show</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: [</span></span><br><span class="line"><span class="language-javascript">                &#123; <span class="attr">value</span>: <span class="string">&#x27;27&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;完美&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123; <span class="attr">value</span>: <span class="string">&#x27;17&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;优秀&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123; <span class="attr">value</span>: <span class="string">&#x27;20&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;良好&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123; <span class="attr">value</span>: <span class="string">&#x27;10&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;及格&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123; <span class="attr">value</span>: <span class="string">&#x27;5&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;不及格&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123; <span class="attr">value</span>: <span class="string">&#x27;1&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;差&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">            ]</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    ]</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p>​    欧克，以上就是封装一个echarts组件的代码过程，十分简单，没有花里胡哨。当然，可能还存在一些漏洞或者不完美的地方，欢迎指正！我也会不断进步哒！我是苏苏，一枚二次元码农🌺。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> vue3 </category>
          
          <category> echarts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue3 </tag>
            
            <tag> echarts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>json-server 从入门到精通</title>
      <link href="/post/json_server.html"/>
      <url>/post/json_server.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>哈喽，这里是苏苏吖~，这篇文章呢主要介绍json-server：一款十分好用的json数据服务器。文章将会按照下面的思维导图来进行，一步一步的深入。</p><img src="../post_img/json-server/json-server.png" alt="json-server" style="zoom:67%;" /><p>好啦，话不多说，开始啦~</p><h2 id="json-server基础">json-server基础</h2><h3 id="json-server简介">json-server简介</h3><p>​        json-server是一款 json 数据服务器，它运行 Express 服务器，可以对json文件、js脚本生成的json数据、远程json数据进行restful风格的增删改查操作，通过指定一个json文件作为api数据源，可以进行分页、排序、关联查询、范围查询等各种查询操作，是一套完整的模拟 REST API 接口</p><p>​        在开始之前，需要先安装json-server。打开Windows power shell，运行<mark>npm install -g json-server</mark>全局安装json-server。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g json-server</span><br></pre></td></tr></table></figure><blockquote><p>💦 此处给的方法是全局安装，当然，也建议最好全局安装。此外，请保证node.js版本在12以上。</p><p>如何切换版本或下载node.js请移步<a href="https://luckysusu.top/post/nvm_nodejs.html">nvm-node.js版本控制工具</a></p></blockquote><p>​        当然，在安装之前推荐先到官网查看相关信息。</p><ul><li><a href="https://www.npmjs.com/package/json-server">npm仓库地址</a></li><li><a href="https://github.com/typicode/json-server">github地址</a></li></ul><blockquote><p>🌺 使用json-server需要注意：</p><ul><li>查询数据使用 <mark>GET</mark></li><li>新增数据使用 <mark>POST</mark></li><li>删除数据使用 <mark>DELETE</mark></li><li>修改数据使用 <mark>PUT</mark> 和 <mark>PATCH</mark></li></ul></blockquote><h3 id="json-server起步">json-server起步</h3><p>​        okk，在了解了json-server是干什么的以及安装好了以后，我们就可以正式开始啦~</p><h4 id="创建db-json文件">创建db.json文件</h4><p>​        在你的项目目录新建一个db.json文件夹，并在json文件中填入以下示例数据：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;posts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;json测试&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="string">&quot;json测试&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;苏苏&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;json测试&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="string">&quot;json测试&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;小翎儿&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;comments&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;测试json&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test@test.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="string">&quot;测试json&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;测试json&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test@test.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="string">&quot;测试json&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;profile&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;测试json&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>💕 这里不需要介意文件具体应该放在那里，也可以创建新文件夹，在新文件夹中创建db.json一样也可以，不影响后续操作。这里将db.json文件放在项目的根目录下。</p></blockquote><h4 id="启动服务">启动服务</h4><p>进入项目目录，打开终端输入 <mark>json-server --watch db.json</mark></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ json-server --watch db.json</span><br></pre></td></tr></table></figure><img src="../post_img/json-server/json-server_running.png" style="zoom:67%;" /><p>出现上述结果即代表运行成功，可以再浏览器端查看结果。此处不展示。</p><h3 id="json-server基础操作—增删改查">json-server基础操作—增删改查</h3><h4 id="查询（GET）">查询（GET）</h4><p>​        在上面我们已经创建了三个接口，现在我们可以通过postman或者自己编写代码测试，下面通过postman测试<a href="http://localhost:3000/posts%E6%8E%A5%E5%8F%A3">http://localhost:3000/posts接口</a></p><img src="../post_img/json-server/json-server-requst.png" style="zoom:67%;" /><p>​        可以看到成功返回数据，表示查询成功，另外两个接口同理可测，此处不展示。</p><h4 id="新增（POST）">新增（POST）</h4><p>​        还是上面的接口，我们以posts接口为例新增一条数据。</p><img src="../post_img/json-server/json-server_post.png" style="zoom:67%;" /><p>​        此时，我们可以返回db.json文件可以看到数据已经同步新增到db.json文件中。</p><img src="../post_img/json-server/json-server_post1.png" style="zoom:67%;" /><blockquote><p>🌸 注意：</p><ul><li><mark>/posts</mark> 原本的数据结构是包含 <mark>id、title、author</mark> 三个字段，id默认自增主键，即使不传也会默认自增。</li><li><mark>json-server</mark> 默认不会限制上传数据的格式和类型，因此需要严格遵循自己设计的数据格式添加或修改。</li></ul></blockquote><h4 id="删除">删除</h4><p><mark>json-server</mark> 删除数据使用 <mark>DELETE</mark> 方法。下面删除刚刚新增的数据。</p><img src="../post_img/json-server/json-server_del.png" style="zoom: 67%;" /><p>​        此时我们可以发现数据已经在db.json文件中同步删除</p><img src="../post_img/json-server/json-server_del1.png" style="zoom:67%;" /><blockquote><p>🌸 注意：</p><ul><li>删除成功的 <mark>Status</mark> 返回的http状态码为 <mark>200</mark> ；</li><li>如果要删除的数据不存在，则会返回 <mark>404</mark></li></ul></blockquote><h4 id="修改（PUT和PATCH）">修改（PUT和PATCH）</h4><blockquote><p>修改数据有两个方法：<mark>put</mark> 覆盖和<mark>patch</mark> 更新</p></blockquote><h5 id="覆盖（put）">覆盖（put）</h5><p>​        现在我们对id为1的数据进行修改</p><img src="../post_img/json-server/json-server_put.png" style="zoom: 67%;" /><p>​        此时返回可以发现id为1的数据已经被修改</p><img src="../post_img/json-server/json-server_put1.png" style="zoom:67%;" /><blockquote><p>🌸 注意：</p><ul><li>原本的数据中包含什么字段，使用put时必需把字段也带上，不然会删掉没传的字段，即 <mark>覆盖</mark></li></ul></blockquote><h5 id="更新（patch）">更新（patch）</h5><blockquote><p>🌸 注意：</p><p>​        与 <mark>覆盖（put）</mark> 不同，<mark>更新（patch）</mark> 时只会更改需要更改的字段，传入什么字段更新什么字段，并不影响原字段。</p></blockquote><p>​        此处以 <mark>id为2</mark> 的数据为例，使用patch方法将id为2的数据body字段设置成“更新patch”：</p><img src="../post_img/json-server/json-server_patch.png" style="zoom:67%;" /><p>​        我们再返回db.json文件查看可以发现数据已经更新：</p><img src="../post_img/json-server/json-server_patch1.png" style="zoom:67%;" /><h2 id="json-server进阶">json-server进阶</h2><p>​        上述内容只是最基本的操作，建议先练习一下熟练后再开始下面的进阶操作。</p><h3 id="json-server启动参数">json-server启动参数</h3><p>​        正如上文提到的通过 <mark>json-server --watch db.json</mark> 启动项目接口文件，json-server中自然也有着其他的参数。具体见下表：</p><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">简写</th><th style="text-align:center">说明</th><th style="text-align:center">默认值</th></tr></thead><tbody><tr><td style="text-align:center"><mark>–config</mark></td><td style="text-align:center">-c</td><td style="text-align:center">配置文件路径</td><td style="text-align:center">“json-server.json”</td></tr><tr><td style="text-align:center"><mark>–port</mark></td><td style="text-align:center">-=</td><td style="text-align:center">设置端口号</td><td style="text-align:center">3000</td></tr><tr><td style="text-align:center"><mark>–host</mark></td><td style="text-align:center">-H</td><td style="text-align:center">设置主机名</td><td style="text-align:center">“localhost”</td></tr><tr><td style="text-align:center"><mark>–watch</mark></td><td style="text-align:center">-w</td><td style="text-align:center">监听文件</td><td style="text-align:center">Boolean</td></tr><tr><td style="text-align:center"><mark>–routes</mark></td><td style="text-align:center">-r</td><td style="text-align:center">路由文件路径</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><mark>–middlewares</mark></td><td style="text-align:center">-m</td><td style="text-align:center">中间件文件路径</td><td style="text-align:center">Array</td></tr><tr><td style="text-align:center"><mark>–static</mark></td><td style="text-align:center">-s</td><td style="text-align:center">静态文件目录</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><mark>–read-only</mark></td><td style="text-align:center">–ro</td><td style="text-align:center">仅允许GET请求</td><td style="text-align:center">Boolean</td></tr><tr><td style="text-align:center"><mark>–no-cors</mark></td><td style="text-align:center">–nc</td><td style="text-align:center">禁用跨源资源共享</td><td style="text-align:center">Boolean</td></tr><tr><td style="text-align:center"><mark>–no-gzip</mark></td><td style="text-align:center">–ng</td><td style="text-align:center">禁GZIP内容编码</td><td style="text-align:center">Boolean</td></tr><tr><td style="text-align:center"><mark>–snapshots</mark></td><td style="text-align:center">-S</td><td style="text-align:center">快照目录</td><td style="text-align:center">&quot; . &quot;</td></tr><tr><td style="text-align:center"><mark>–delay</mark></td><td style="text-align:center">-d</td><td style="text-align:center">延迟相应的时间(ms)</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><mark>–id</mark></td><td style="text-align:center">-i</td><td style="text-align:center">设置数据库的id属性（如：_id）</td><td style="text-align:center">“id”</td></tr><tr><td style="text-align:center"><mark>–foreignKeySuffix</mark></td><td style="text-align:center">–fks</td><td style="text-align:center">设置外键后缀（如：_id；_post_id）</td><td style="text-align:center">“id”</td></tr><tr><td style="text-align:center"><mark>–quiet</mark></td><td style="text-align:center">-q</td><td style="text-align:center">禁止输出日志消息</td><td style="text-align:center">Boolean</td></tr><tr><td style="text-align:center"><mark>–help</mark></td><td style="text-align:center">-h</td><td style="text-align:center">显示帮助信息</td><td style="text-align:center">Boolean</td></tr><tr><td style="text-align:center"><mark>–version</mark></td><td style="text-align:center">-v</td><td style="text-align:center">显示版本号</td><td style="text-align:center">Boolean</td></tr></tbody></table><h3 id="json-server进阶配置">json-server进阶配置</h3><blockquote><p>了解完上述参数后，接下来就来看看具体如何操作吧。</p></blockquote><h4 id="配置端口">配置端口</h4><p>​        在上文中有提到，json-server的默认端口号是 <mark>3000</mark>，但如果同时启动多个项目，且都需要运行json-server时，就会出现端口冲突，这时，重新配置端口号就可以解决这一问题了。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ json-server -p 8888 db.json</span><br></pre></td></tr></table></figure><p>​        在终端输入以上命令后，就会重新配置端口并启动json-server服务。</p><img src="../post_img/json-server/json-server_port.png" style="zoom:67%;" /><h4 id="配置主机地址">配置主机地址</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ json-server -H 0.0.0.0 db,json  //此处H务必大写！！原因查看上述表格</span><br></pre></td></tr></table></figure><p>​        此处我们设置的 <mark>db.json</mark> 的主机地址为 <mark>0.0.0.0</mark>，这就代表可以通过本机 <mark>IP</mark> 来访问，同时在同一个局域网内的其他设备亦可以通过该地址访问（此处演示操作，不建议做修改）</p><h4 id="添加自定义路由">添加自定义路由</h4><p>​        方便理解路由，我们新建一个 <mark>routes.json</mark> 文件，并开始配置。在新建的 <mark>routes.json</mark>文件中输入下列代码：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;/api/*&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/$1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;/:resource/:id/show&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/:resource/:id&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;/posts/:category&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/posts?category=:category&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;/articles?id=:id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/posts/:id&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>​        接下来，使用选项启动json-server，<mark>–routes</mark></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ json-server db.json --routes routes.json</span><br></pre></td></tr></table></figure><img src="../post_img/json-server/json-server_routes.png" style="zoom:67%;" /><p>​        启动成功后，就可以通过路由访问资源。</p><h3 id="json-server常用查询">json-server常用查询</h3><blockquote><p>🌿  在项目的实际开发中，查询操作最常见，也是最重要的的。因此下面介绍不同的查询操作。</p><p><strong>以<mark>基础部分</mark> 时创建的 <mark>db.json</mark> 文件数据为例：</strong></p></blockquote><h4 id="普通查询">普通查询</h4><ul><li><p>查询 <mark>/posts</mark> 下的所有数据</p>  <figure class="highlight http"><table><tr><td class="code"><pre><span class="line">http://localhost:3000/posts</span><br></pre></td></tr></table></figure></li><li><p>查询 <mark>/comments</mark> 下的所有数据</p>  <figure class="highlight http"><table><tr><td class="code"><pre><span class="line">http://localhost:3000/comments</span><br></pre></td></tr></table></figure></li><li><p>查询 <mark>/profile</mark>所有数据</p>  <figure class="highlight http"><table><tr><td class="code"><pre><span class="line">http://localhost:3000/profile</span><br></pre></td></tr></table></figure></li></ul><h4 id="id查询">id查询</h4><ul><li>查询 <mark>id为2</mark> 的数据</li></ul><figure class="highlight http"><table><tr><td class="code"><pre><span class="line">http://localhost:端口号/posts/&#123;id&#125;  //公式</span><br><span class="line">http://localhost:3000/posts/2    //示例</span><br></pre></td></tr></table></figure><img src="../post_img/json-server/json-server_idselect.png" style="zoom:67%;" /><h4 id="条件查询——以-mark-mark-拼接查询条件">条件查询——以 <mark>?</mark>拼接查询条件</h4><blockquote><p>🌿  条件查询包括<mark>单一条件查询</mark> 、<mark>多条件查询（且）</mark> 、<mark>多条件查询（或）</mark> 和 <mark>深度属性查询</mark></p></blockquote><p><strong>将 <mark>基础部分</mark> 创建的 <mark>db.json</mark> 文件中的posts部分做出如下修改</strong></p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;posts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;苏苏最可爱&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;authorInfo&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;苏苏&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">20</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;sex&quot;</span><span class="punctuation">:</span> <span class="string">&quot;女&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;归途依旧可爱&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="string">&quot;json-server&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;小翎儿&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;江月何年初照人&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;authorInfo&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;小苏&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">20</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;sex&quot;</span><span class="punctuation">:</span> <span class="string">&quot;女&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;黄鹤振玉羽，西飞帝王州&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="string">&quot;json-server&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;小翎儿&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h5 id="单一条件查询">单一条件查询</h5><ul><li>查询 <mark>author</mark> 是 <mark>小翎儿</mark> 的数据</li></ul><figure class="highlight http"><table><tr><td class="code"><pre><span class="line">http://localhost:端口号/posts?[查询条件]  //公式</span><br><span class="line">http://localhost:3000/posts?author=小翎儿   //示例</span><br></pre></td></tr></table></figure><img src="../post_img/json-server/json-server_get_once.png" style="zoom:67%;" /><h5 id="多条件查询（且）——以-mark-mark-添加查询条件">多条件查询（且）——以 <mark>&amp;</mark>添加查询条件</h5><ul><li>查询 <mark>author=小翎儿</mark> 且 <mark>title=归途依旧可爱</mark> 的数据</li></ul><figure class="highlight http"><table><tr><td class="code"><pre><span class="line">http://localhost:端口号/posts?[查询条件]&amp;[添加条件]  //公式</span><br><span class="line">http://localhost:3000/posts?author=小翎儿&amp;title=归途依旧可爱   //示例</span><br></pre></td></tr></table></figure><img src="../post_img/json-server/json-server_get_&.png" style="zoom:67%;" /><h5 id="多条件查询（或）——以-mark-mark-添加查询条件">多条件查询（或）——以 <mark>&amp;</mark>添加查询条件</h5><ul><li>查询 <mark>title=苏苏最可爱</mark> 或 <mark>title=归途依旧可爱</mark> 的数据</li></ul><figure class="highlight http"><table><tr><td class="code"><pre><span class="line">http://localhost:端口号/posts?[查询条件]&amp;[添加条件]  //公式</span><br><span class="line">http://localhost:3000/posts?title=苏苏最可爱&amp;title=归途依旧可爱   //示例</span><br></pre></td></tr></table></figure><img src="../post_img/json-server/json-server_get_&&.png" style="zoom:67%;" /><h5 id="深度属性查询">深度属性查询</h5><p>​        在我们准备的数据中可以看到有的字段内部还有子属性，如果要查询这些子属性，只需要像JavaScript中对象一样操作，即通过<mark>.子属性</mark>来获取</p><ul><li>查询 <mark>name=苏苏</mark> 的数据</li></ul><figure class="highlight http"><table><tr><td class="code"><pre><span class="line">http://localhost:3000/posts?authorInfo.name=苏苏</span><br></pre></td></tr></table></figure><img src="../post_img/json-server/json-server_deepget.png" style="zoom:67%;" /><h4 id="分页查询">分页查询</h4><blockquote><p>🌿  分页查询使用 <mark>_page</mark> 和 <mark>_limit</mark>（可选）对数据进行分页。</p><ul><li><mark>_page</mark>：页码</li><li><mark>_limit</mark>：每页的数据量</li></ul></blockquote><p><strong>现在修改 <mark>db.json</mark> 中的数据方便测试分页功能。</strong></p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;comments&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user1&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test@test.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="string">&quot;json-server——1&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;postId&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user2&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test@test.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="string">&quot;json-server——2&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;postId&quot;</span><span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user3&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test@test.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="string">&quot;json-server——3&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;postId&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user4&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test@test.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="string">&quot;json-server——4&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;postId&quot;</span><span class="punctuation">:</span> <span class="number">3</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user5&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test@test.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="string">&quot;json-server——5&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;postId&quot;</span><span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user6&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test@test.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="string">&quot;json-server——6&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;postId&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user7&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test@test.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="string">&quot;json-server——7&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;postId&quot;</span><span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">8</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user8&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test@test.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="string">&quot;json-server——8&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;postId&quot;</span><span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">9</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user9&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test@test.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="string">&quot;json-server——9&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;postId&quot;</span><span class="punctuation">:</span> <span class="number">3</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user10&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test@test.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="string">&quot;json-server——10&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;postId&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>​        这里我们先准备10条数据。</p><ul><li>获取第1页的数据，每页3条数据</li></ul><figure class="highlight http"><table><tr><td class="code"><pre><span class="line">http://localhost:3000/comments?_page=1&amp;_limit=3</span><br></pre></td></tr></table></figure><img src="../post_img/json-server/json-server_fenye.png" style="zoom:67%;" /><p>​        此处可以看到json-server将原本的数据默认做了一个处理，我们用 <mark>axios</mark> 来看看请求结果包括哪些内容。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;http://localhost:3000/comments&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">params</span>: &#123;</span><br><span class="line">   <span class="attr">_page</span>: <span class="number">1</span>,</span><br><span class="line">   <span class="attr">_limit</span>: <span class="number">3</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(err)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><img src="../post_img/json-server/json-server_fenye-control.png" style="zoom:67%;" /><p>同时展开<mark>headers</mark>中的内容可以看到，其中还有一个属性：<mark>x-total-count</mark>，包含着数据总量。</p><img src="../post_img/json-server/json-server_fenye-control1.png" style="zoom:67%;" /><p><mark>link</mark>属性中存放的则是 <mark>第一页、下一页和最后一页</mark> 的地址链接</p><figure class="highlight http"><table><tr><td class="code"><pre><span class="line">&quot;&lt;http://localhost:3000/comments?_page=1&amp;_limit=3&gt;; rel=\&quot;first\&quot;, &lt;http://localhost:3000/comments?_page=2&amp;_limit=3&gt;; rel=\&quot;next\&quot;, &lt;http://localhost:3000/comments?_page=4&amp;_limit=3&gt;; rel=\&quot;last\&quot;&quot;</span><br></pre></td></tr></table></figure><h4 id="排序查询">排序查询</h4><blockquote><p>🌿 排序查询使用 <mark>_sort</mark>对数据进行排序，通过 <mark>_order</mark> 设置排序规则。和传统排序规则一样，json-server的排序规则也有<mark>升序（asc）和降序（desc）</mark></p></blockquote><figure class="highlight http"><table><tr><td class="code"><pre><span class="line">http://localhost:3000/&#123;接口名&#125;?_sort=要排序的字段名&amp;_order=排序规则</span><br></pre></td></tr></table></figure><p>我们将上文的数据顺序打乱如下：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;comments&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user7&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test@test.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="string">&quot;json-server——7&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;postId&quot;</span><span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user4&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test@test.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="string">&quot;json-server——4&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;postId&quot;</span><span class="punctuation">:</span> <span class="number">3</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">9</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user9&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test@test.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="string">&quot;json-server——9&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;postId&quot;</span><span class="punctuation">:</span> <span class="number">3</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user5&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test@test.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="string">&quot;json-server——5&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;postId&quot;</span><span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user3&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test@test.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="string">&quot;json-server——3&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;postId&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user10&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test@test.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="string">&quot;json-server——10&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;postId&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user6&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test@test.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="string">&quot;json-server——6&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;postId&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user1&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test@test.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="string">&quot;json-server——1&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;postId&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">8</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user8&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test@test.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="string">&quot;json-server——8&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;postId&quot;</span><span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user2&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test@test.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="string">&quot;json-server——2&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;postId&quot;</span><span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">        </span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h5 id="升序（asc）">升序（asc）</h5><ul><li>以id为参考字段，对原数据做升序排列</li></ul><figure class="highlight http"><table><tr><td class="code"><pre><span class="line">http://localhost:3000/comments?_sort=id</span><br><span class="line">或</span><br><span class="line">http://localhost:3000/comments?_sort=id&amp;_order=asc</span><br></pre></td></tr></table></figure><img src="../post_img/json-server/json-server_sort-asc.png" style="zoom:67%;" /><blockquote><p>🌸 注意：</p><p>​        在普通升序排列中，<mark>_order=asc</mark> 可以不传，只需要指定<mark>参考字段（_sort）</mark> 即可；</p><p>​        而在降序排列中，<mark>_order=desc</mark> 则必须要传值！</p></blockquote><h5 id="降序（desc）">降序（desc）</h5><figure class="highlight http"><table><tr><td class="code"><pre><span class="line">http://localhost:3000/comments?_sort=id&amp;_order=desc</span><br></pre></td></tr></table></figure><img src="../post_img/json-server/json-server_sort-desc.png" style="zoom:67%;" /><h5 id="多字段排序">多字段排序</h5><blockquote><p>🌿 多个字段使用 <mark> , </mark>（英文逗号）分隔排序条件。</p></blockquote><ul><li>先按 <mark>postId</mark> 升序排列，再按 <mark>id</mark> 进行倒序排列</li></ul><figure class="highlight http"><table><tr><td class="code"><pre><span class="line">http://localhost:3000/comments?_sort=postId,id&amp;_order=asc,desc  //_sort参数和_order的参数一一对应。</span><br></pre></td></tr></table></figure><img src="../post_img/json-server/json-server_sort-any.png" style="zoom: 67%;" /><h4 id="切片查询">切片查询</h4><blockquote><p>🌿切片查询即指定头尾，也可以指定头和片段长度。切片查询对应的参数：</p><ul><li><mark>_start</mark>：开始位置（下标，从0开始）</li><li><mark>_end</mark>：结束位置</li><li><mark>_limit</mark>：片段长度</li></ul><p><mark>总数</mark> 会存放在 <mark>headers</mark> 中</p></blockquote><h5 id="使用-mark-start-mark-和-mark-end-mark-方式">使用 <mark>_start</mark> 和 <mark>_end</mark> 方式</h5><figure class="highlight http"><table><tr><td class="code"><pre><span class="line">http://localhost:3000/comments?_start=2&amp;_end=3</span><br></pre></td></tr></table></figure><img src="../post_img/json-server/json-server_fenduan-end.png" style="zoom:67%;" /><h5 id="使用-mark-start-mark-和-mark-limit-mark-方式">使用 <mark>_start</mark> 和 <mark>_limit</mark> 方式</h5><figure class="highlight http"><table><tr><td class="code"><pre><span class="line">http://localhost:3000/comments?_start=2&amp;_limit=3</span><br></pre></td></tr></table></figure><img src="../post_img/json-server/json-server_fenduan-limit.png" style="zoom:67%;" /><h4 id="范围查询">范围查询</h4><blockquote><p>🌿 范围查询包括 <mark>大于等于（_gte）、小于等于（_lte）、不等于（_ne）</mark> 三种情况。</p></blockquote><h5 id="大于等于-gte">大于等于 _gte</h5><ul><li>查询 <mark>id</mark> 大于等于 9 的数据</li></ul><figure class="highlight http"><table><tr><td class="code"><pre><span class="line">http://localhost:3000/comments?id_gte=9</span><br></pre></td></tr></table></figure><img src="../post_img/json-server/json-server_compare-gte.png" style="zoom:67%;" /><h5 id="小于等于-lte">小于等于  _lte</h5><ul><li>查询 <mark>id</mark> 小于等于 2 的数据</li></ul><figure class="highlight http"><table><tr><td class="code"><pre><span class="line">http://localhost:3000/comments?id_lte=2</span><br></pre></td></tr></table></figure><img src="../post_img/json-server/json-server_compare-lte.png" style="zoom:67%;" /><blockquote><p>🔔 联合使用：</p><ul><li>查询查询 <mark>id</mark> 大于等于 4 且小于等于 5 的数据</li></ul><figure class="highlight http"><table><tr><td class="code"><pre><span class="line">&gt;http://localhost:3000/comments?id_gte=4&amp;id_lte=5</span><br></pre></td></tr></table></figure><img src="../post_img/json-server/json-server_compare-both.png" style="zoom:67%;" /></blockquote><h5 id="不等于-ne">不等于 _ne</h5><ul><li>查询 <mark>id</mark> 不等于 2 的数据</li></ul><figure class="highlight http"><table><tr><td class="code"><pre><span class="line">http://localhost:3000/comments?id_ne=2</span><br></pre></td></tr></table></figure><img src="../post_img/json-server/json-server_compare-ne.png" style="zoom:67%;" /><h4 id="模糊查询">模糊查询</h4><blockquote><p>🌿 模糊查询使用的关键字为 <mark>_like</mark></p></blockquote><ul><li>查询 <strong>postId</strong>中包含 3 的数据</li></ul><figure class="highlight http"><table><tr><td class="code"><pre><span class="line">http://localhost:3000/comments?postId_like=3</span><br></pre></td></tr></table></figure><img src="../post_img/json-server/json-server_like.png" style="zoom:67%;" /><h4 id="全文查询">全文查询</h4><blockquote><p>🌿 全文查询使用的关键字为 <mark>q</mark></p></blockquote><ul><li>查询所有字段中包含 <mark>苏</mark> 的数据</li></ul><figure class="highlight http"><table><tr><td class="code"><pre><span class="line">http://localhost:3000/posts?q=苏</span><br></pre></td></tr></table></figure><img src="../post_img/json-server/json-server_all.png" style="zoom:67%;" /><h4 id="外键关联查询">外键关联查询</h4><blockquote><p>🌿 外键关联查询需要不同的接口关联，这里使用posts和comments接口中的数据</p></blockquote><ul><li>查询posts里 id 为 3 的所有 comments 数据</li></ul><figure class="highlight http"><table><tr><td class="code"><pre><span class="line">http://localhost:3000/posts/3/comments</span><br></pre></td></tr></table></figure><img src="../post_img/json-server/json-server-foriger.png" style="zoom:67%;" /><h4 id="关系拼装">关系拼装</h4><blockquote><p>🌿  关系拼装就是将两个关联的接口的数据拼接起来并返回。关系拼装有两种查询关系。</p><ul><li>包含子资源 <mark>_embed</mark></li><li>包含父资源 <mark>_expand</mark></li></ul></blockquote><h5 id="包含子资源-mark-embed-mark">包含子资源 <mark>_embed</mark></h5><figure class="highlight http"><table><tr><td class="code"><pre><span class="line">http://localhost:3000/posts?_embed=comments   //基础应用</span><br><span class="line">http://localhost:3000/posts/2?_embed=comments   //进阶 将posts里id为2的数据找出来并拼接</span><br></pre></td></tr></table></figure><p>基础应用：</p><img src="../post_img/json-server/json-server_embed.png" style="zoom:67%;" /><p>进阶：</p><img src="../post_img/json-server/json-server_embed1.png" style="zoom:67%;" /><h5 id="包含父资源-mark-expand-mark">包含父资源 <mark>_expand</mark></h5><figure class="highlight http"><table><tr><td class="code"><pre><span class="line">http://localhost:3000/comments?_expand=post</span><br></pre></td></tr></table></figure><img src="../post_img/json-server/json-server_expand.png" style="zoom:67%;" /><blockquote><p>同样，也可以像上述一样进阶，此处不演示</p></blockquote><h3 id="json-server静态资源">json-server静态资源</h3><blockquote><p>🎉 静态资源包含 <mark>html、css、JavaScript、image、audio、video</mark> 等资源</p></blockquote><h4 id="json-server静态资源配置">json-server静态资源配置</h4><h5 id="默认配置">默认配置</h5><p>静态资源配置需要在根目录下创建<mark>public</mark>文件夹，并放入<mark>.html，.css或.js</mark>等文件。编写好后访问<a href="http://localhost:3000/%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E7%BC%96%E5%86%99%E7%9A%84html%E6%96%87%E4%BB%B6%E4%BB%A5%E5%8F%8A%E5%AF%B9%E5%BA%94%E7%9A%84%E6%A0%B7%E5%BC%8F%E4%BA%86%E3%80%82">http://localhost:3000/就可以看到编写的html文件以及对应的样式了。</a></p><h5 id="指定资源位置">指定资源位置</h5><p><code>json-server</code> 配资静态资源的默认方式是在根目录下创建 <code>public</code> 文件夹，然后里面放入静态资源。</p><p>如果不想使用 <code>public</code> 作为静态资源的文件夹，也可以起别的名字，然后在启动环境时使用 <code>--static</code> 来指定目标目录就行了。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ json-server db.json --static ./new   //代表创建了一个名为new的文件夹，用于存放静态资源</span><br></pre></td></tr></table></figure><h4 id="json-server多媒体资源">json-server多媒体资源</h4><blockquote><p>🌿  多媒体资源配置比较简单，比如将图片放在public目录下，访问时通过<a href="http://localhost:3000/%E5%9B%BE%E7%89%87%E6%96%87%E4%BB%B6%E5%90%8D">http://localhost:3000/图片文件名</a> 就能够访问</p></blockquote><h3 id="其他">其他</h3><h4 id="json-server生成动态数据">json-server生成动态数据</h4><p>在工作时或者学习时，如果没有数据来源，那么json-server也可以解决这个问题，支持动态创建数据。</p><p>1、在根目录下创建<code>db.js</code>文件</p><p>2、在文件中加入下列内容</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> data=&#123; <span class="attr">user</span>:[] &#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">        data.<span class="property">user</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">            <span class="attr">id</span>:i,</span><br><span class="line">            <span class="attr">name</span>:<span class="string">`user<span class="subst">$&#123;i&#125;</span>`</span>,</span><br><span class="line">            <span class="attr">age</span>:<span class="number">15</span>+i</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、运行<code>js</code>文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ json-server db.js</span><br></pre></td></tr></table></figure><p>4、查询验证</p><figure class="highlight http"><table><tr><td class="code"><pre><span class="line">http://localhost:3000/user</span><br></pre></td></tr></table></figure><img src="../post_img/json-server/json-server_%E7%94%9F%E6%88%90%E5%8A%A8%E6%80%81%E6%95%B0%E6%8D%AE.png" style="zoom:67%;" /><blockquote><p>🌿  注意：</p><p>​        如果生成数据的js文件并未放在根目录下，请参照下面的内容：</p><p>​        例如：将js文件放置在<code>public/db.js</code>。则运行js文件时，命令应该如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ json-server ./public/db.js</span><br></pre></td></tr></table></figure><p>💞 此外，还需注意的是，db.js文件中的数据生成书写与原生js类似。若要生成范围区间数字，依然可采用<code>Math.random()</code>方法.</p></blockquote><p>5、报错解决方案</p><p>如果文件位置正确，运行js的命令正确，js文件内容书写无误，依然出现类似下列报错信息，请尝试后面讲到的两种解决方法(仅供参考)：</p><img src="../post_img/json-server/json-server_errorinfo.png" style="zoom:67%;" /><p>🍀<strong>解决方法1</strong>：</p><p>查看项目的<code>package.json</code>文件是否存在<code>type:module</code>。如有，<mark>请确认删除字段后不会影响项目后再删除！！</mark>；删除后重新运行js文件即可。</p><p>🍀<strong>解决方法2</strong>：</p><p>如果项目的<code>package.json</code>文件中的<code>type:module</code>删除会影响整体项目，则请采用方法2：修改<code>db.js</code>文件的后缀名为<code>cjs</code>。即<mark>将原来的db.js文件修改为db.cjs</mark>。修改后重新运行cjs文件即可。</p><h4 id="json-server查询整个数据库">json-server查询整个数据库</h4><blockquote><p>查询整个数据库只需要访问下面的地址就可以得到整个数据库的数据</p><figure class="highlight http"><table><tr><td class="code"><pre><span class="line">&gt;http://localhost:3000/db</span><br></pre></td></tr></table></figure></blockquote><h4 id="json-server远程模式">json-server远程模式</h4><blockquote><p>如果需要使用互联网的数据，只需要在运行json-server后面加上远端地址即可</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ json-server 远程地址</span><br></pre></td></tr></table></figure></blockquote><hr><p>好啦，json-server的内容到此结束。🎉🎉🎉如有问题请留言~欢迎批评指正！</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 前端 </category>
          
          <category> json-server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> json-server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo中使用emoji表情</title>
      <link href="/post/hexo_emoji.html"/>
      <url>/post/hexo_emoji.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>哈喽，这里是苏苏吖~在Hexo搭建博客完成后，就可以开始写文章啦，不过，如果想要在文章中使用各种各样的emoji表情，就需要一点别的插件啦。因为Hexo默认的markdown渲染引擎已经不再支持将Github emoji渲染到静态的html中。下面介绍怎么解决。</p><h2 id="安装插件">安装插件</h2><p>首先，在博客目录打开终端，输入下列命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm un hexo-renderer-marked --save</span><br><span class="line">$ npm i hexo-renderer-markdown-it --save</span><br><span class="line">$ npm install markdown-it-emoji --save</span><br></pre></td></tr></table></figure><p>先卸载掉原来的<a href="https://github.com/hexojs/hexo-renderer-marked">hexo-renderer-marked</a>，然后下载新的插件<a href="https://github.com/hexojs/hexo-renderer-markdown-it">hexo-renderer-markdown-it</a>和<a href="https://github.com/markdown-it/markdown-it-emoji">markdown-it-emoji</a></p><blockquote><p>✨ <code>hexo-renderer-markdown-it</code> 的速度比Hexo原装插件要快很多很多，而且功能也更加丰富</p></blockquote><h2 id="配置">配置</h2><p>插件安装完成后，在Hexo博客的站点配置文件<code>_config.yml</code> 添加一下内容：</p><blockquote><p>❗ 不是在主题的<code>_config_butterfly.yml</code>，是在<code>_config.yml</code> ！！千万别搞错了。</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">markdown:</span></span><br><span class="line">  <span class="attr">render:</span></span><br><span class="line">    <span class="attr">html:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">xhtmlOut:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">breaks:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">linkify:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">typographer:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">quotes:</span> <span class="string">&#x27;“”‘’&#x27;</span></span><br><span class="line">  <span class="attr">plugins:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-footnote</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-sup</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-sub</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-abbr</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-emoji</span></span><br><span class="line">  <span class="attr">anchors:</span></span><br><span class="line">    <span class="attr">level:</span> <span class="number">2</span></span><br><span class="line">    <span class="attr">collisionSuffix:</span> <span class="string">&#x27;v&#x27;</span></span><br><span class="line">    <span class="attr">permalink:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">permalinkClass:</span> <span class="string">header-anchor</span></span><br><span class="line">    <span class="attr">permalinkSymbol:</span> <span class="string">¶</span></span><br></pre></td></tr></table></figure><p>可选参数：</p><table><thead><tr><th>参数</th><th>参数值</th><th>解释</th></tr></thead><tbody><tr><td><code>preset</code></td><td>‘default’</td><td>指定预设的 Markdown 渲染配置，使用默认的渲染配置。</td></tr><tr><td><code>render.html</code></td><td>true</td><td>将输出渲染为 HTML 标签。</td></tr><tr><td><code>render.xhtmlOut</code></td><td>false</td><td>将输出渲染为 XHTML 标签。</td></tr><tr><td><code>render.langPrefix</code></td><td>‘language-’</td><td>在代码块中，给语言名称添加的 CSS 类前缀。</td></tr><tr><td><code>render.breaks</code></td><td>true</td><td>将换行符转换为 <code>&lt;br&gt;</code> 标签。</td></tr><tr><td><code>render.linkify</code></td><td>true</td><td>将文本中的链接自动转换为 <code>&lt;a&gt;</code> 标签。</td></tr><tr><td><code>render.typographer</code></td><td>true</td><td>启用一些常见的排版替换，比如智能引号等。</td></tr><tr><td><code>render.quotes</code></td><td>‘“”‘’’</td><td>指定使用的引号样式为中文的双引号和单引号。</td></tr><tr><td><code>enable_rules</code></td><td>无</td><td>没有启用任何渲染规则。</td></tr><tr><td><code>disable_rules</code></td><td>无</td><td>没有禁用任何渲染规则。</td></tr><tr><td><code>plugins</code></td><td>无</td><td>没有配置插件的相关选项。</td></tr><tr><td><code>anchors.level</code></td><td>2</td><td>标题的级别，标题级别为 2 及以上的标题会生成锚点。</td></tr><tr><td><code>anchors.collisionSuffix</code></td><td>‘’</td><td>在生成锚点时，遇到冲突时添加的后缀。</td></tr><tr><td><code>anchors.permalink</code></td><td>false</td><td>不为每个标题生成固定链接。</td></tr><tr><td><code>anchors.permalinkClass</code></td><td>header-anchor</td><td>固定链接的 CSS 类名。</td></tr><tr><td><code>anchors.permalinkSide</code></td><td>‘left’</td><td>固定链接的位置在标题左侧。</td></tr><tr><td><code>anchors.permalinkSymbol</code></td><td>‘¶’</td><td>固定链接的符号。</td></tr><tr><td><code>anchors.case</code></td><td>0</td><td>生成锚点链接的大小写保持原样。</td></tr><tr><td><code>anchors.separator</code></td><td>‘-’</td><td>生成锚点链接时使用的分隔符。</td></tr><tr><td><code>images.lazyload</code></td><td>false</td><td>禁用懒加载图片。</td></tr><tr><td><code>images.prepend_root</code></td><td>false</td><td>在图片路径前不添加根路径。</td></tr><tr><td><code>images.post_asset</code></td><td>false</td><td>图片路径不作为 asset。</td></tr><tr><td><code>inline</code></td><td>false</td><td>不渲染为行内 Markdown。</td></tr></tbody></table><h2 id="使用方法">使用方法</h2><p>在配置完成以后，在写作时，直接输入对应的emoji编码就可以使用了。下面是一些收集的编码合集：</p><div class="tabs" id="test1"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test1-1">人物</button><button type="button" class="tab " data-href="test1-2">自然</button><button type="button" class="tab " data-href="test1-3">事物</button><button type="button" class="tab " data-href="test1-4">地点</button><button type="button" class="tab " data-href="test1-5">符号</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p>人物:</p><table><thead><tr><th style="text-align:left">😐  <code>:neutral_face:</code></th><th style="text-align:left">😄 <code>:smile:</code></th><th style="text-align:left">😆 <code>:laughing:</code></th></tr></thead><tbody><tr><td style="text-align:left">😊 <code>:blush:</code></td><td style="text-align:left">😃 <code>:smiley:</code></td><td style="text-align:left">☺️ <code>:relaxed:</code></td></tr><tr><td style="text-align:left">😏 <code>:smirk:</code></td><td style="text-align:left">😍 <code>:heart_eyes:</code></td><td style="text-align:left">😘 <code>:kissing_heart:</code></td></tr><tr><td style="text-align:left">😚 <code>:kissing_closed_eyes:</code></td><td style="text-align:left">😳 <code>:flushed:</code></td><td style="text-align:left">😌 <code>:relieved:</code></td></tr><tr><td style="text-align:left">😆 <code>:satisfied:</code></td><td style="text-align:left">😁 <code>:grin:</code></td><td style="text-align:left">😉 <code>:wink:</code></td></tr><tr><td style="text-align:left">😜 <code>:stuck_out_tongue_winking_eye:</code></td><td style="text-align:left">😝 <code>:stuck_out_tongue_closed_eyes:</code></td><td style="text-align:left">😀 <code>:grinning:</code></td></tr><tr><td style="text-align:left">😗 <code>:kissing:</code></td><td style="text-align:left">😙 <code>:kissing_smiling_eyes:</code></td><td style="text-align:left">😛 <code>:stuck_out_tongue:</code></td></tr><tr><td style="text-align:left">😴 <code>:sleeping:</code></td><td style="text-align:left">😟 <code>:worried:</code></td><td style="text-align:left">😦 <code>:frowning:</code></td></tr><tr><td style="text-align:left">😧 <code>:anguished:</code></td><td style="text-align:left">😮 <code>:open_mouth:</code></td><td style="text-align:left">😬 <code>:grimacing:</code></td></tr><tr><td style="text-align:left">😕 <code>:confused:</code></td><td style="text-align:left">😯 <code>:hushed:</code></td><td style="text-align:left">😑 <code>:expressionless:</code></td></tr><tr><td style="text-align:left">😒 <code>:unamused:</code></td><td style="text-align:left">😅 <code>:sweat_smile:</code></td><td style="text-align:left">😓 <code>:sweat:</code></td></tr><tr><td style="text-align:left">😥 <code>:disappointed_relieved:</code></td><td style="text-align:left">😩 <code>:weary:</code></td><td style="text-align:left">😔 <code>:pensive:</code></td></tr><tr><td style="text-align:left">😞 <code>:disappointed:</code></td><td style="text-align:left">😖 <code>:confounded:</code></td><td style="text-align:left">😨 <code>:fearful:</code></td></tr><tr><td style="text-align:left">😰 <code>:cold_sweat:</code></td><td style="text-align:left">😣 <code>:persevere:</code></td><td style="text-align:left">😢 <code>:cry:</code></td></tr><tr><td style="text-align:left">😭 <code>:sob:</code></td><td style="text-align:left">😂 <code>:joy:</code></td><td style="text-align:left">😲 <code>:astonished:</code></td></tr><tr><td style="text-align:left">😱 <code>:scream:</code></td><td style="text-align:left">💭 <code>:thought_balloon:</code></td><td style="text-align:left">😫 <code>:tired_face:</code></td></tr><tr><td style="text-align:left">😠 <code>:angry:</code></td><td style="text-align:left">😡 <code>:rage:</code></td><td style="text-align:left">😤 <code>:triumph:</code></td></tr><tr><td style="text-align:left">😪 <code>:sleepy:</code></td><td style="text-align:left">😋 <code>:yum:</code></td><td style="text-align:left">😷 <code>:mask:</code></td></tr><tr><td style="text-align:left">😎 <code>:sunglasses:</code></td><td style="text-align:left">😵 <code>:dizzy_face:</code></td><td style="text-align:left">👿 <code>:imp:</code></td></tr><tr><td style="text-align:left">😈 <code>:smiling_imp:</code></td><td style="text-align:left">💬 <code>:speech_balloon:</code></td><td style="text-align:left">😶 <code>:no_mouth:</code></td></tr><tr><td style="text-align:left">😇 <code>:innocent:</code></td><td style="text-align:left">👽 <code>:alien:</code></td><td style="text-align:left">💛 <code>:yellow_heart:</code></td></tr><tr><td style="text-align:left">💙 <code>:blue_heart:</code></td><td style="text-align:left">💜 <code>:purple_heart:</code></td><td style="text-align:left">❤️ <code>:heart:</code></td></tr><tr><td style="text-align:left">💚 <code>:green_heart:</code></td><td style="text-align:left">💔 <code>:broken_heart:</code></td><td style="text-align:left">💓 <code>:heartbeat:</code></td></tr><tr><td style="text-align:left">💗 <code>:heartpulse:</code></td><td style="text-align:left">💕 <code>:two_hearts:</code></td><td style="text-align:left">💞 <code>:revolving_hearts:</code></td></tr><tr><td style="text-align:left">💘 <code>:cupid:</code></td><td style="text-align:left">💖 <code>:sparkling_heart:</code></td><td style="text-align:left">✨ <code>:sparkles:</code></td></tr><tr><td style="text-align:left">⭐️ <code>:star:</code></td><td style="text-align:left">🌟 <code>:star2:</code></td><td style="text-align:left">💫 <code>:dizzy:</code></td></tr><tr><td style="text-align:left">💥 <code>:boom:</code></td><td style="text-align:left">💥 <code>:collision:</code></td><td style="text-align:left">💢 <code>:anger:</code></td></tr><tr><td style="text-align:left">❗️ <code>:exclamation:</code></td><td style="text-align:left">❓ <code>:question:</code></td><td style="text-align:left">❕ <code>:grey_exclamation:</code></td></tr><tr><td style="text-align:left">❔ <code>:grey_question:</code></td><td style="text-align:left">💤 <code>:zzz:</code></td><td style="text-align:left">💨 <code>:dash:</code></td></tr><tr><td style="text-align:left">💦 <code>:sweat_drops:</code></td><td style="text-align:left">🎶 <code>:notes:</code></td><td style="text-align:left">🎵 <code>:musical_note:</code></td></tr><tr><td style="text-align:left">🔥 <code>:fire:</code></td><td style="text-align:left">💩 <code>:hankey:</code></td><td style="text-align:left">💩 <code>:poop:</code></td></tr><tr><td style="text-align:left">💩 <code>:shit:</code></td><td style="text-align:left">👍 <code>:+1:</code></td><td style="text-align:left">👍 <code>:thumbsup:</code></td></tr><tr><td style="text-align:left">👎 <code>:-1:</code></td><td style="text-align:left">👎 <code>:thumbsdown:</code></td><td style="text-align:left">👌 <code>:ok_hand:</code></td></tr><tr><td style="text-align:left">👊 <code>:punch:</code></td><td style="text-align:left">👊 <code>:facepunch:</code></td><td style="text-align:left">✊ <code>:fist:</code></td></tr><tr><td style="text-align:left">✌️ <code>:v:</code></td><td style="text-align:left">👋 <code>:wave:</code></td><td style="text-align:left">✋ <code>:hand:</code></td></tr><tr><td style="text-align:left">✋ <code>:raised_hand:</code></td><td style="text-align:left">👐 <code>:open_hands:</code></td><td style="text-align:left">☝️ <code>:point_up:</code></td></tr><tr><td style="text-align:left">👇 <code>:point_down:</code></td><td style="text-align:left">👈 <code>:point_left:</code></td><td style="text-align:left">👉 <code>:point_right:</code></td></tr><tr><td style="text-align:left">🙌 <code>:raised_hands:</code></td><td style="text-align:left">🙏 <code>:pray:</code></td><td style="text-align:left">👆 <code>:point_up_2:</code></td></tr><tr><td style="text-align:left">👏 <code>:clap:</code></td><td style="text-align:left">💪 <code>:muscle:</code></td><td style="text-align:left">🤘 <code>:metal:</code></td></tr><tr><td style="text-align:left">🖕 <code>:fu:</code></td><td style="text-align:left">🚶 <code>:walking:</code></td><td style="text-align:left">🏃 <code>:runner:</code></td></tr><tr><td style="text-align:left">🏃 <code>:running:</code></td><td style="text-align:left">👫 <code>:couple:</code></td><td style="text-align:left">👪 <code>:family:</code></td></tr><tr><td style="text-align:left">👬 <code>:two_men_holding_hands:</code></td><td style="text-align:left">👭 <code>:two_women_holding_hands:</code></td><td style="text-align:left">💃 <code>:dancer:</code></td></tr><tr><td style="text-align:left">👯 <code>:dancers:</code></td><td style="text-align:left">🙆 <code>:ok_woman:</code></td><td style="text-align:left">🙅 <code>:no_good:</code></td></tr><tr><td style="text-align:left">💁 <code>:information_desk_person:</code></td><td style="text-align:left">🙋 <code>:raising_hand:</code></td><td style="text-align:left">👰 <code>:bride_with_veil:</code></td></tr><tr><td style="text-align:left">🙎 <code>:person_with_pouting_face:</code></td><td style="text-align:left">🙍 <code>:person_frowning:</code></td><td style="text-align:left">🙇 <code>:bow:</code></td></tr><tr><td style="text-align:left">💏 <code>:couplekiss:</code></td><td style="text-align:left">💑 <code>:couple_with_heart:</code></td><td style="text-align:left">💆 <code>:massage:</code></td></tr><tr><td style="text-align:left">💇 <code>:haircut:</code></td><td style="text-align:left">💅 <code>:nail_care:</code></td><td style="text-align:left">👦 <code>:boy:</code></td></tr><tr><td style="text-align:left">👧 <code>:girl:</code></td><td style="text-align:left">👩 <code>:woman:</code></td><td style="text-align:left">👨 <code>:man:</code></td></tr><tr><td style="text-align:left">👶 <code>:baby:</code></td><td style="text-align:left">👵 <code>:older_woman:</code></td><td style="text-align:left">👴 <code>:older_man:</code></td></tr><tr><td style="text-align:left">👱 <code>:person_with_blond_hair:</code></td><td style="text-align:left">👲 <code>:man_with_gua_pi_mao:</code></td><td style="text-align:left">👳 <code>:man_with_turban:</code></td></tr><tr><td style="text-align:left">👷 <code>:construction_worker:</code></td><td style="text-align:left">👮 <code>:cop:</code></td><td style="text-align:left">👼 <code>:angel:</code></td></tr><tr><td style="text-align:left">👸 <code>:princess:</code></td><td style="text-align:left">😺 <code>:smiley_cat:</code></td><td style="text-align:left">😸 <code>:smile_cat:</code></td></tr><tr><td style="text-align:left">😻 <code>:heart_eyes_cat:</code></td><td style="text-align:left">😽 <code>:kissing_cat:</code></td><td style="text-align:left">😼 <code>:smirk_cat:</code></td></tr><tr><td style="text-align:left">🙀 <code>:scream_cat:</code></td><td style="text-align:left">😿 <code>:crying_cat_face:</code></td><td style="text-align:left">😹 <code>:joy_cat:</code></td></tr><tr><td style="text-align:left">😾 <code>:pouting_cat:</code></td><td style="text-align:left">👹 <code>:japanese_ogre:</code></td><td style="text-align:left">👺 <code>:japanese_goblin:</code></td></tr><tr><td style="text-align:left">🙈 <code>:see_no_evil:</code></td><td style="text-align:left">🙉 <code>:hear_no_evil:</code></td><td style="text-align:left">🙊 <code>:speak_no_evil:</code></td></tr><tr><td style="text-align:left">💂 <code>:guardsman:</code></td><td style="text-align:left">💀 <code>:skull:</code></td><td style="text-align:left">🐾 <code>:feet:</code></td></tr><tr><td style="text-align:left">👄 <code>:lips:</code></td><td style="text-align:left">💋 <code>:kiss:</code></td><td style="text-align:left">💧 <code>:droplet:</code></td></tr><tr><td style="text-align:left">👂 <code>:ear:</code></td><td style="text-align:left">👀 <code>:eyes:</code></td><td style="text-align:left">👃 <code>:nose:</code></td></tr><tr><td style="text-align:left">👅 <code>:tongue:</code></td><td style="text-align:left">💌 <code>:love_letter:</code></td><td style="text-align:left">👤 <code>:bust_in_silhouette:</code></td></tr><tr><td style="text-align:left">👥 <code>:busts_in_silhouette:</code></td><td style="text-align:left"></td><td style="text-align:left"></td></tr></tbody></table></div><div class="tab-item-content" id="test1-2"><p>自然：</p><table><thead><tr><th>☀️ <code>:sunny:</code></th><th style="text-align:left">☔️ <code>:umbrella:</code></th><th style="text-align:left">☁️ <code>:cloud:</code></th></tr></thead><tbody><tr><td>❄️ <code>:snowflake:</code></td><td style="text-align:left">⛄️ <code>:snowman:</code></td><td style="text-align:left">⚡️ <code>:zap:</code></td></tr><tr><td>🌀 <code>:cyclone:</code></td><td style="text-align:left">🌁 <code>:foggy:</code></td><td style="text-align:left">🌊 <code>:ocean:</code></td></tr><tr><td>🐱 <code>:cat:</code></td><td style="text-align:left">🐶 <code>:dog:</code></td><td style="text-align:left">🐭 <code>:mouse:</code></td></tr><tr><td>🐹 <code>:hamster:</code></td><td style="text-align:left">🐰 <code>:rabbit:</code></td><td style="text-align:left">🐺 <code>:wolf:</code></td></tr><tr><td>🐸 <code>:frog:</code></td><td style="text-align:left">🐯 <code>:tiger:</code></td><td style="text-align:left">🐨 <code>:koala:</code></td></tr><tr><td>🐻 <code>:bear:</code></td><td style="text-align:left">🐷 <code>:pig:</code></td><td style="text-align:left">🐽 <code>:pig_nose:</code></td></tr><tr><td>🐮 <code>:cow:</code></td><td style="text-align:left">🐗 <code>:boar:</code></td><td style="text-align:left">🐵 <code>:monkey_face:</code></td></tr><tr><td>🐒 <code>:monkey:</code></td><td style="text-align:left">🐴 <code>:horse:</code></td><td style="text-align:left">🐎 <code>:racehorse:</code></td></tr><tr><td>🐫 <code>:camel:</code></td><td style="text-align:left">🐑 <code>:sheep:</code></td><td style="text-align:left">🐘 <code>:elephant:</code></td></tr><tr><td>🐼 <code>:panda_face:</code></td><td style="text-align:left">🐍 <code>:snake:</code></td><td style="text-align:left">🐦 <code>:bird:</code></td></tr><tr><td>🐤 <code>:baby_chick:</code></td><td style="text-align:left">🐥 <code>:hatched_chick:</code></td><td style="text-align:left">🐣 <code>:hatching_chick:</code></td></tr><tr><td>🐔 <code>:chicken:</code></td><td style="text-align:left">🐧 <code>:penguin:</code></td><td style="text-align:left">🐢 <code>:turtle:</code></td></tr><tr><td>🐛 <code>:bug:</code></td><td style="text-align:left">🐝 <code>:honeybee:</code></td><td style="text-align:left">🐜 <code>:ant:</code></td></tr><tr><td>🐞 <code>:beetle:</code></td><td style="text-align:left">🐌 <code>:snail:</code></td><td style="text-align:left">🐙 <code>:octopus:</code></td></tr><tr><td>🐠 <code>:tropical_fish:</code></td><td style="text-align:left">🐟 <code>:fish:</code></td><td style="text-align:left">🐳 <code>:whale:</code></td></tr><tr><td>🐋 <code>:whale2:</code></td><td style="text-align:left">🐬 <code>:dolphin:</code></td><td style="text-align:left">🐄 <code>:cow2:</code></td></tr><tr><td>🐏 <code>:ram:</code></td><td style="text-align:left">🐀 <code>:rat:</code></td><td style="text-align:left">🐃 <code>:water_buffalo:</code></td></tr><tr><td>🐅 <code>:tiger2:</code></td><td style="text-align:left">🐇 <code>:rabbit2:</code></td><td style="text-align:left">🐉 <code>:dragon:</code></td></tr><tr><td>🐐 <code>:goat:</code></td><td style="text-align:left">🐓 <code>:rooster:</code></td><td style="text-align:left">🐕 <code>:dog2:</code></td></tr><tr><td>🐖 <code>:pig2:</code></td><td style="text-align:left">🐁 <code>:mouse2:</code></td><td style="text-align:left">🐂 <code>:ox:</code></td></tr><tr><td>🐲 <code>:dragon_face:</code></td><td style="text-align:left">🐡 <code>:blowfish:</code></td><td style="text-align:left">🐊 <code>:crocodile:</code></td></tr><tr><td>🐪 <code>:dromedary_camel:</code></td><td style="text-align:left">🐆 <code>:leopard:</code></td><td style="text-align:left">🐈 <code>:cat2:</code></td></tr><tr><td>🐩 <code>:poodle:</code></td><td style="text-align:left">🐾 <code>:paw_prints:</code></td><td style="text-align:left">💐 <code>:bouquet:</code></td></tr><tr><td>🌸 <code>:cherry_blossom:</code></td><td style="text-align:left">🌷 <code>:tulip:</code></td><td style="text-align:left">🍀 <code>:four_leaf_clover:</code></td></tr><tr><td>🌹 <code>:rose:</code></td><td style="text-align:left">🌻 <code>:sunflower:</code></td><td style="text-align:left">🌺 <code>:hibiscus:</code></td></tr><tr><td>🍁 <code>:maple_leaf:</code></td><td style="text-align:left">🍃 <code>:leaves:</code></td><td style="text-align:left">🍂 <code>:fallen_leaf:</code></td></tr><tr><td>🌿 <code>:herb:</code></td><td style="text-align:left">🍄 <code>:mushroom:</code></td><td style="text-align:left">🌵 <code>:cactus:</code></td></tr><tr><td>🌴 <code>:palm_tree:</code></td><td style="text-align:left">🌲 <code>:evergreen_tree:</code></td><td style="text-align:left">🌳 <code>:deciduous_tree:</code></td></tr><tr><td>🌰 <code>:chestnut:</code></td><td style="text-align:left">🌱 <code>:seedling:</code></td><td style="text-align:left">🌼 <code>:blossom:</code></td></tr><tr><td>🌾 <code>:ear_of_rice:</code></td><td style="text-align:left">🐚 <code>:shell:</code></td><td style="text-align:left">🌐 <code>:globe_with_meridians:</code></td></tr><tr><td>🌞 <code>:sun_with_face:</code></td><td style="text-align:left">🌝 <code>:full_moon_with_face:</code></td><td style="text-align:left">🌚 <code>:new_moon_with_face:</code></td></tr><tr><td>🌑 <code>:new_moon:</code></td><td style="text-align:left">🌒 <code>:waxing_crescent_moon:</code></td><td style="text-align:left">🌓 <code>:first_quarter_moon:</code></td></tr><tr><td>🌔 <code>:waxing_gibbous_moon:</code></td><td style="text-align:left">🌕 <code>:full_moon:</code></td><td style="text-align:left">🌖 <code>:waning_gibbous_moon:</code></td></tr><tr><td>🌗 <code>:last_quarter_moon:</code></td><td style="text-align:left">🌘 <code>:waning_crescent_moon:</code></td><td style="text-align:left">🌜 <code>:last_quarter_moon_with_face:</code></td></tr><tr><td>🌛 <code>:first_quarter_moon_with_face:</code></td><td style="text-align:left">🌔 <code>:moon:</code></td><td style="text-align:left">🌍 <code>:earth_africa:</code></td></tr><tr><td>🌎 <code>:earth_americas:</code></td><td style="text-align:left">🌏 <code>:earth_asia:</code></td><td style="text-align:left">🌋 <code>:volcano:</code></td></tr><tr><td>🌌 <code>:milky_way:</code></td><td style="text-align:left">⛅️ <code>:partly_sunny:</code></td><td style="text-align:left"></td></tr></tbody></table></div><div class="tab-item-content" id="test1-3"><p>事物：</p><table><thead><tr><th style="text-align:left">🎍 <code>:bamboo:</code></th><th style="text-align:left">💝 <code>:gift_heart:</code></th><th style="text-align:left">🎎 <code>:dolls:</code></th></tr></thead><tbody><tr><td style="text-align:left">🎒 <code>:school_satchel:</code></td><td style="text-align:left">🎓 <code>:mortar_board:</code></td><td style="text-align:left">🎏 <code>:flags:</code></td></tr><tr><td style="text-align:left">🎆 <code>:fireworks:</code></td><td style="text-align:left">🎇 <code>:sparkler:</code></td><td style="text-align:left">🎐 <code>:wind_chime:</code></td></tr><tr><td style="text-align:left">🎑 <code>:rice_scene:</code></td><td style="text-align:left">🎃 <code>:jack_o_lantern:</code></td><td style="text-align:left">👻 <code>:ghost:</code></td></tr><tr><td style="text-align:left">🎅 <code>:santa:</code></td><td style="text-align:left">🎄 <code>:christmas_tree:</code></td><td style="text-align:left">🎁 <code>:gift:</code></td></tr><tr><td style="text-align:left">🔔 <code>:bell:</code></td><td style="text-align:left">🔕 <code>:no_bell:</code></td><td style="text-align:left">🎋 <code>:tanabata_tree:</code></td></tr><tr><td style="text-align:left">🎉 <code>:tada:</code></td><td style="text-align:left">🎊 <code>:confetti_ball:</code></td><td style="text-align:left">🎈 <code>:balloon:</code></td></tr><tr><td style="text-align:left">🔮 <code>:crystal_ball:</code></td><td style="text-align:left">💿 <code>:cd:</code></td><td style="text-align:left">📀 <code>:dvd:</code></td></tr><tr><td style="text-align:left">💾 <code>:floppy_disk:</code></td><td style="text-align:left">📷 <code>:camera:</code></td><td style="text-align:left">📹 <code>:video_camera:</code></td></tr><tr><td style="text-align:left">🎥 <code>:movie_camera:</code></td><td style="text-align:left">💻 <code>:computer:</code></td><td style="text-align:left">📺 <code>:tv:</code></td></tr><tr><td style="text-align:left">📱 <code>:iphone:</code></td><td style="text-align:left">☎️ <code>:phone:</code></td><td style="text-align:left">☎️ <code>:telephone:</code></td></tr><tr><td style="text-align:left">📞 <code>:telephone_receiver:</code></td><td style="text-align:left">📟 <code>:pager:</code></td><td style="text-align:left">📠 <code>:fax:</code></td></tr><tr><td style="text-align:left">💽 <code>:minidisc:</code></td><td style="text-align:left">📼 <code>:vhs:</code></td><td style="text-align:left">🔉 <code>:sound:</code></td></tr><tr><td style="text-align:left">🔈 <code>:speaker:</code></td><td style="text-align:left">🔇 <code>:mute:</code></td><td style="text-align:left">📢 <code>:loudspeaker:</code></td></tr><tr><td style="text-align:left">📣 <code>:mega:</code></td><td style="text-align:left">⌛️ <code>:hourglass:</code></td><td style="text-align:left">⏳ <code>:hourglass_flowing_sand:</code></td></tr><tr><td style="text-align:left">⏰ <code>:alarm_clock:</code></td><td style="text-align:left">⌚️ <code>:watch:</code></td><td style="text-align:left">📻 <code>:radio:</code></td></tr><tr><td style="text-align:left">📡 <code>:satellite:</code></td><td style="text-align:left">➿ <code>:loop:</code></td><td style="text-align:left">🔍 <code>:mag:</code></td></tr><tr><td style="text-align:left">🔎 <code>:mag_right:</code></td><td style="text-align:left">🔓 <code>:unlock:</code></td><td style="text-align:left">🔒 <code>:lock:</code></td></tr><tr><td style="text-align:left">🔏 <code>:lock_with_ink_pen:</code></td><td style="text-align:left">🔐 <code>:closed_lock_with_key:</code></td><td style="text-align:left">🔑 <code>:key:</code></td></tr><tr><td style="text-align:left">💡 <code>:bulb:</code></td><td style="text-align:left">🔦 <code>:flashlight:</code></td><td style="text-align:left">🔆 <code>:high_brightness:</code></td></tr><tr><td style="text-align:left">🔅 <code>:low_brightness:</code></td><td style="text-align:left">🔌 <code>:electric_plug:</code></td><td style="text-align:left">🔋 <code>:battery:</code></td></tr><tr><td style="text-align:left">📲 <code>:calling:</code></td><td style="text-align:left">✉️ <code>:email:</code></td><td style="text-align:left">📫 <code>:mailbox:</code></td></tr><tr><td style="text-align:left">📮 <code>:postbox:</code></td><td style="text-align:left">🛀 <code>:bath:</code></td><td style="text-align:left">🛁 <code>:bathtub:</code></td></tr><tr><td style="text-align:left">🚿 <code>:shower:</code></td><td style="text-align:left">🚽 <code>:toilet:</code></td><td style="text-align:left">🔧 <code>:wrench:</code></td></tr><tr><td style="text-align:left">🔩 <code>:nut_and_bolt:</code></td><td style="text-align:left">🔨 <code>:hammer:</code></td><td style="text-align:left">💺 <code>:seat:</code></td></tr><tr><td style="text-align:left">💰 <code>:moneybag:</code></td><td style="text-align:left">💴 <code>:yen:</code></td><td style="text-align:left">💵 <code>:dollar:</code></td></tr><tr><td style="text-align:left">💷 <code>:pound:</code></td><td style="text-align:left">💶 <code>:euro:</code></td><td style="text-align:left">💳 <code>:credit_card:</code></td></tr><tr><td style="text-align:left">💸 <code>:money_with_wings:</code></td><td style="text-align:left">📧 <code>:e-mail:</code></td><td style="text-align:left">📥 <code>:inbox_tray:</code></td></tr><tr><td style="text-align:left">📤 <code>:outbox_tray:</code></td><td style="text-align:left">✉️ <code>:envelope:</code></td><td style="text-align:left">📨 <code>:incoming_envelope:</code></td></tr><tr><td style="text-align:left">📯 <code>:postal_horn:</code></td><td style="text-align:left">📪 <code>:mailbox_closed:</code></td><td style="text-align:left">📬 <code>:mailbox_with_mail:</code></td></tr><tr><td style="text-align:left">📭 <code>:mailbox_with_no_mail:</code></td><td style="text-align:left">🚪 <code>:door:</code></td><td style="text-align:left">🚬 <code>:smoking:</code></td></tr><tr><td style="text-align:left">💣 <code>:bomb:</code></td><td style="text-align:left">🔫 <code>:gun:</code></td><td style="text-align:left">🔪 <code>:hocho:</code></td></tr><tr><td style="text-align:left">💊 <code>:pill:</code></td><td style="text-align:left">💉 <code>:syringe:</code></td><td style="text-align:left">📄 <code>:page_facing_up:</code></td></tr><tr><td style="text-align:left">📃 <code>:page_with_curl:</code></td><td style="text-align:left">📑 <code>:bookmark_tabs:</code></td><td style="text-align:left">📊 <code>:bar_chart:</code></td></tr><tr><td style="text-align:left">📈 <code>:chart_with_upwards_trend:</code></td><td style="text-align:left">📉 <code>:chart_with_downwards_trend:</code></td><td style="text-align:left">📜 <code>:scroll:</code></td></tr><tr><td style="text-align:left">📋 <code>:clipboard:</code></td><td style="text-align:left">📆 <code>:calendar:</code></td><td style="text-align:left">📅 <code>:date:</code></td></tr><tr><td style="text-align:left">📇 <code>:card_index:</code></td><td style="text-align:left">📁 <code>:file_folder:</code></td><td style="text-align:left">📂 <code>:open_file_folder:</code></td></tr><tr><td style="text-align:left">✂️ <code>:scissors:</code></td><td style="text-align:left">📌 <code>:pushpin:</code></td><td style="text-align:left">📎 <code>:paperclip:</code></td></tr><tr><td style="text-align:left">✒️ <code>:black_nib:</code></td><td style="text-align:left">✏️ <code>:pencil2:</code></td><td style="text-align:left">📏 <code>:straight_ruler:</code></td></tr><tr><td style="text-align:left">📐 <code>:triangular_ruler:</code></td><td style="text-align:left">📕 <code>:closed_book:</code></td><td style="text-align:left">📗 <code>:green_book:</code></td></tr><tr><td style="text-align:left">📘 <code>:blue_book:</code></td><td style="text-align:left">📙 <code>:orange_book:</code></td><td style="text-align:left">📓 <code>:notebook:</code></td></tr><tr><td style="text-align:left">📔 <code>:notebook_with_decorative_cover:</code></td><td style="text-align:left">📒 <code>:ledger:</code></td><td style="text-align:left">📚 <code>:books:</code></td></tr><tr><td style="text-align:left">🔖 <code>:bookmark:</code></td><td style="text-align:left">📛 <code>:name_badge:</code></td><td style="text-align:left">🔬 <code>:microscope:</code></td></tr><tr><td style="text-align:left">🔭 <code>:telescope:</code></td><td style="text-align:left">📰 <code>:newspaper:</code></td><td style="text-align:left">🏈 <code>:football:</code></td></tr><tr><td style="text-align:left">🏀 <code>:basketball:</code></td><td style="text-align:left">⚽️ <code>:soccer:</code></td><td style="text-align:left">⚾️ <code>:baseball:</code></td></tr><tr><td style="text-align:left">🎾 <code>:tennis:</code></td><td style="text-align:left">🎱 <code>:8ball:</code></td><td style="text-align:left">🏉 <code>:rugby_football:</code></td></tr><tr><td style="text-align:left">🎳 <code>:bowling:</code></td><td style="text-align:left">⛳️ <code>:golf:</code></td><td style="text-align:left">🚵 <code>:mountain_bicyclist:</code></td></tr><tr><td style="text-align:left">🚴 <code>:bicyclist:</code></td><td style="text-align:left">🏇 <code>:horse_racing:</code></td><td style="text-align:left">🏂 <code>:snowboarder:</code></td></tr><tr><td style="text-align:left">🏊 <code>:swimmer:</code></td><td style="text-align:left">🏄 <code>:surfer:</code></td><td style="text-align:left">🎿 <code>:ski:</code></td></tr><tr><td style="text-align:left">♠️ <code>:spades:</code></td><td style="text-align:left">♥️ <code>:hearts:</code></td><td style="text-align:left">♣️ <code>:clubs:</code></td></tr><tr><td style="text-align:left">♦️ <code>:diamonds:</code></td><td style="text-align:left">💎 <code>:gem:</code></td><td style="text-align:left">💍 <code>:ring:</code></td></tr><tr><td style="text-align:left">🏆 <code>:trophy:</code></td><td style="text-align:left">🎼 <code>:musical_score:</code></td><td style="text-align:left">🎹 <code>:musical_keyboard:</code></td></tr><tr><td style="text-align:left">🎻 <code>:violin:</code></td><td style="text-align:left">👾 <code>:space_invader:</code></td><td style="text-align:left">🎮 <code>:video_game:</code></td></tr><tr><td style="text-align:left">🃏 <code>:black_joker:</code></td><td style="text-align:left">🎴 <code>:flower_playing_cards:</code></td><td style="text-align:left">🎲 <code>:game_die:</code></td></tr><tr><td style="text-align:left">🎯 <code>:dart:</code></td><td style="text-align:left">🀄️ <code>:mahjong:</code></td><td style="text-align:left">🎬 <code>:clapper:</code></td></tr><tr><td style="text-align:left">📝 <code>:memo:</code></td><td style="text-align:left">📝 <code>:pencil:</code></td><td style="text-align:left">📖 <code>:book:</code></td></tr><tr><td style="text-align:left">🎨 <code>:art:</code></td><td style="text-align:left">🎤 <code>:microphone:</code></td><td style="text-align:left">🎧 <code>:headphones:</code></td></tr><tr><td style="text-align:left">🎺 <code>:trumpet:</code></td><td style="text-align:left">🎷 <code>:saxophone:</code></td><td style="text-align:left">🎸 <code>:guitar:</code></td></tr><tr><td style="text-align:left">👞 <code>:shoe:</code></td><td style="text-align:left">👡 <code>:sandal:</code></td><td style="text-align:left">👠 <code>:high_heel:</code></td></tr><tr><td style="text-align:left">💄 <code>:lipstick:</code></td><td style="text-align:left">👢 <code>:boot:</code></td><td style="text-align:left">👕 <code>:shirt:</code></td></tr><tr><td style="text-align:left">👕 <code>:tshirt:</code></td><td style="text-align:left">👔 <code>:necktie:</code></td><td style="text-align:left">👚 <code>:womans_clothes:</code></td></tr><tr><td style="text-align:left">👗 <code>:dress:</code></td><td style="text-align:left">🎽 <code>:running_shirt_with_sash:</code></td><td style="text-align:left">👖 <code>:jeans:</code></td></tr><tr><td style="text-align:left">👘 <code>:kimono:</code></td><td style="text-align:left">👙 <code>:bikini:</code></td><td style="text-align:left">🎀 <code>:ribbon:</code></td></tr><tr><td style="text-align:left">🎩 <code>:tophat:</code></td><td style="text-align:left">👑 <code>:crown:</code></td><td style="text-align:left">👒 <code>:womans_hat:</code></td></tr><tr><td style="text-align:left">👞 <code>:mans_shoe:</code></td><td style="text-align:left">🌂 <code>:closed_umbrella:</code></td><td style="text-align:left">💼 <code>:briefcase:</code></td></tr><tr><td style="text-align:left">👜 <code>:handbag:</code></td><td style="text-align:left">👝 <code>:pouch:</code></td><td style="text-align:left">👛 <code>:purse:</code></td></tr><tr><td style="text-align:left">👓 <code>:eyeglasses:</code></td><td style="text-align:left">🎣 <code>:fishing_pole_and_fish:</code></td><td style="text-align:left">☕️ <code>:coffee:</code></td></tr><tr><td style="text-align:left">🍵 <code>:tea:</code></td><td style="text-align:left">🍶 <code>:sake:</code></td><td style="text-align:left">🍼 <code>:baby_bottle:</code></td></tr><tr><td style="text-align:left">🍺 <code>:beer:</code></td><td style="text-align:left">🍻 <code>:beers:</code></td><td style="text-align:left">🍸 <code>:cocktail:</code></td></tr><tr><td style="text-align:left">🍹 <code>:tropical_drink:</code></td><td style="text-align:left">🍷 <code>:wine_glass:</code></td><td style="text-align:left">🍴 <code>:fork_and_knife:</code></td></tr><tr><td style="text-align:left">🍕 <code>:pizza:</code></td><td style="text-align:left">🍔 <code>:hamburger:</code></td><td style="text-align:left">🍟 <code>:fries:</code></td></tr><tr><td style="text-align:left">🍗 <code>:poultry_leg:</code></td><td style="text-align:left">🍖 <code>:meat_on_bone:</code></td><td style="text-align:left">🍝 <code>:spaghetti:</code></td></tr><tr><td style="text-align:left">🍛 <code>:curry:</code></td><td style="text-align:left">🍤 <code>:fried_shrimp:</code></td><td style="text-align:left">🍱 <code>:bento:</code></td></tr><tr><td style="text-align:left">🍣 <code>:sushi:</code></td><td style="text-align:left">🍥 <code>:fish_cake:</code></td><td style="text-align:left">🍙 <code>:rice_ball:</code></td></tr><tr><td style="text-align:left">🍘 <code>:rice_cracker:</code></td><td style="text-align:left">🍚 <code>:rice:</code></td><td style="text-align:left">🍜 <code>:ramen:</code></td></tr><tr><td style="text-align:left">🍲 <code>:stew:</code></td><td style="text-align:left">🍢 <code>:oden:</code></td><td style="text-align:left">🍡 <code>:dango:</code></td></tr><tr><td style="text-align:left">🥚 <code>:egg:</code></td><td style="text-align:left">🍞 <code>:bread:</code></td><td style="text-align:left">🍩 <code>:doughnut:</code></td></tr><tr><td style="text-align:left">🍮 <code>:custard:</code></td><td style="text-align:left">🍦 <code>:icecream:</code></td><td style="text-align:left">🍨 <code>:ice_cream:</code></td></tr><tr><td style="text-align:left">🍧 <code>:shaved_ice:</code></td><td style="text-align:left">🎂 <code>:birthday:</code></td><td style="text-align:left">🍰 <code>:cake:</code></td></tr><tr><td style="text-align:left">🍪 <code>:cookie:</code></td><td style="text-align:left">🍫 <code>:chocolate_bar:</code></td><td style="text-align:left">🍬 <code>:candy:</code></td></tr><tr><td style="text-align:left">🍭 <code>:lollipop:</code></td><td style="text-align:left">🍯 <code>:honey_pot:</code></td><td style="text-align:left">🍎 <code>:apple:</code></td></tr><tr><td style="text-align:left">🍏 <code>:green_apple:</code></td><td style="text-align:left">🍊 <code>:tangerine:</code></td><td style="text-align:left">🍋 <code>:lemon:</code></td></tr><tr><td style="text-align:left">🍒 <code>:cherries:</code></td><td style="text-align:left">🍇 <code>:grapes:</code></td><td style="text-align:left">🍉 <code>:watermelon:</code></td></tr><tr><td style="text-align:left">🍓 <code>:strawberry:</code></td><td style="text-align:left">🍑 <code>:peach:</code></td><td style="text-align:left">🍈 <code>:melon:</code></td></tr><tr><td style="text-align:left">🍌 <code>:banana:</code></td><td style="text-align:left">🍐 <code>:pear:</code></td><td style="text-align:left">🍍 <code>:pineapple:</code></td></tr><tr><td style="text-align:left">🍠 <code>:sweet_potato:</code></td><td style="text-align:left">🍆 <code>:eggplant:</code></td><td style="text-align:left">🍅 <code>:tomato:</code></td></tr><tr><td style="text-align:left">🌽 <code>:corn:</code></td><td style="text-align:left"></td><td style="text-align:left"></td></tr></tbody></table></div><div class="tab-item-content" id="test1-4"><p>地点：</p><table><thead><tr><th style="text-align:left">🏠<code>:house:</code></th><th style="text-align:left">🏡<code>:house_with_garden:</code></th><th style="text-align:left">🏫<code>:school:</code></th></tr></thead><tbody><tr><td style="text-align:left">🏢<code>:office:</code></td><td style="text-align:left">🏣<code>:post_office:</code></td><td style="text-align:left">🏥<code>:hospital:</code></td></tr><tr><td style="text-align:left">🏦<code>:bank:</code></td><td style="text-align:left">🏪<code>:convenience_store:</code></td><td style="text-align:left">🏩<code>:love_hotel:</code></td></tr><tr><td style="text-align:left">🏨<code>:hotel:</code></td><td style="text-align:left">💒<code>:wedding:</code></td><td style="text-align:left">⛪️<code>:church:</code></td></tr><tr><td style="text-align:left">🏬<code>:department_store:</code></td><td style="text-align:left">🏤<code>:european_post_office:</code></td><td style="text-align:left">🌇<code>:city_sunrise:</code></td></tr><tr><td style="text-align:left">🌆<code>:city_sunset:</code></td><td style="text-align:left">🏯<code>:japanese_castle:</code></td><td style="text-align:left">🏰<code>:european_castle:</code></td></tr><tr><td style="text-align:left">⛺️<code>:tent:</code></td><td style="text-align:left">🏭<code>:factory:</code></td><td style="text-align:left">🗼<code>:tokyo_tower:</code></td></tr><tr><td style="text-align:left">🗾<code>:japan:</code></td><td style="text-align:left">🗻<code>:mount_fuji:</code></td><td style="text-align:left">🌄<code>:sunrise_over_mountains:</code></td></tr><tr><td style="text-align:left">🌅<code>:sunrise:</code></td><td style="text-align:left">🌠<code>:stars:</code></td><td style="text-align:left">🗽<code>:statue_of_liberty:</code></td></tr><tr><td style="text-align:left">🌉<code>:bridge_at_night:</code></td><td style="text-align:left">🎠<code>:carousel_horse:</code></td><td style="text-align:left">🌈<code>:rainbow:</code></td></tr><tr><td style="text-align:left">🎡<code>:ferris_wheel:</code></td><td style="text-align:left">⛲️<code>:fountain:</code></td><td style="text-align:left">🎢<code>:roller_coaster:</code></td></tr><tr><td style="text-align:left">🚢<code>:ship:</code></td><td style="text-align:left">🚤<code>:speedboat:</code></td><td style="text-align:left">⛵️<code>:boat:</code></td></tr><tr><td style="text-align:left">⛵️<code>:sailboat:</code></td><td style="text-align:left">🚣<code>:rowboat:</code></td><td style="text-align:left">⚓️<code>:anchor:</code></td></tr><tr><td style="text-align:left">🚀<code>:rocket:</code></td><td style="text-align:left">✈️<code>:airplane:</code></td><td style="text-align:left">🚁<code>:helicopter:</code></td></tr><tr><td style="text-align:left">🚂<code>:steam_locomotive:</code></td><td style="text-align:left">🚊<code>:tram:</code></td><td style="text-align:left">🚞<code>:mountain_railway:</code></td></tr><tr><td style="text-align:left">🚲<code>:bike:</code></td><td style="text-align:left">🚡<code>:aerial_tramway:</code></td><td style="text-align:left">🚟<code>:suspension_railway:</code></td></tr><tr><td style="text-align:left">🚠<code>:mountain_cableway:</code></td><td style="text-align:left">🚜<code>:tractor:</code></td><td style="text-align:left">🚙<code>:blue_car:</code></td></tr><tr><td style="text-align:left">🚘<code>:oncoming_automobile:</code></td><td style="text-align:left">🚗<code>:car:</code></td><td style="text-align:left">🚗<code>:red_car:</code></td></tr><tr><td style="text-align:left">🚕<code>:taxi:</code></td><td style="text-align:left">🚖<code>:oncoming_taxi:</code></td><td style="text-align:left">🚛<code>:articulated_lorry:</code></td></tr><tr><td style="text-align:left">🚌<code>:bus:</code></td><td style="text-align:left">🚍<code>:oncoming_bus:</code></td><td style="text-align:left">🚨<code>:rotating_light:</code></td></tr><tr><td style="text-align:left">🚓<code>:police_car:</code></td><td style="text-align:left">🚔<code>:oncoming_police_car:</code></td><td style="text-align:left">🚒<code>:fire_engine:</code></td></tr><tr><td style="text-align:left">🚑<code>:ambulance:</code></td><td style="text-align:left">🚐<code>:minibus:</code></td><td style="text-align:left">🚚<code>:truck:</code></td></tr><tr><td style="text-align:left">🚋<code>:train:</code></td><td style="text-align:left">🚉<code>:station:</code></td><td style="text-align:left">🚆<code>:train2:</code></td></tr><tr><td style="text-align:left">🚅<code>:bullettrain_front:</code></td><td style="text-align:left">🚄<code>:bullettrain_side:</code></td><td style="text-align:left">🚈<code>:light_rail:</code></td></tr><tr><td style="text-align:left">🚝<code>:monorail:</code></td><td style="text-align:left">🚃<code>:railway_car:</code></td><td style="text-align:left">🚎<code>:trolleybus:</code></td></tr><tr><td style="text-align:left">🎫<code>:ticket:</code></td><td style="text-align:left">⛽️<code>:fuelpump:</code></td><td style="text-align:left">🚦<code>:vertical_traffic_light:</code>🚥<code>:traffic_light:</code></td></tr></tbody></table></div><div class="tab-item-content" id="test1-5"><p>符号：</p><table><thead><tr><th>1️⃣ <code>:one:</code></th><th>2️⃣ <code>:two:</code></th><th>3️⃣ <code>:three:</code></th></tr></thead><tbody><tr><td>4️⃣ <code>:four:</code></td><td>5️⃣ <code>:five:</code></td><td>6️⃣ <code>:six:</code></td></tr><tr><td>7️⃣ <code>:seven:</code></td><td>8️⃣ <code>:eight:</code></td><td>9️⃣ <code>:nine:</code></td></tr><tr><td>🔟 <code>:keycap_ten:</code></td><td>🔢 <code>:1234:</code></td><td>0️⃣ <code>:zero:</code></td></tr><tr><td>#️⃣ <code>:hash:</code></td><td>🔣 <code>:symbols:</code></td><td>◀️ <code>:arrow_backward:</code></td></tr><tr><td>⬇️ <code>:arrow_down:</code></td><td>▶️ <code>:arrow_forward:</code></td><td>⬅️ <code>:arrow_left:</code></td></tr><tr><td>🔠 <code>:capital_abcd:</code></td><td>🔡 <code>:abcd:</code></td><td>🔤 <code>:abc:</code></td></tr><tr><td>↙️ <code>:arrow_lower_left:</code></td><td>↘️ <code>:arrow_lower_right:</code></td><td>⬆️ <code>:arrow_up:</code></td></tr><tr><td>↖️ <code>:arrow_upper_left:</code></td><td>↗️ <code>:arrow_upper_right:</code></td><td>⏬ <code>:arrow_double_down:</code></td></tr><tr><td>⏫ <code>:arrow_double_up:</code></td><td>🔽 <code>:arrow_down_small:</code></td><td>⤵️ <code>:arrow_heading_down:</code></td></tr><tr><td>⤴️ <code>:arrow_heading_up:</code></td><td>↩️ <code>:leftwards_arrow_with_hook:</code></td><td>↪️ <code>:arrow_right_hook:</code></td></tr><tr><td>↔️ <code>:left_right_arrow:</code></td><td>↕️ <code>:arrow_up_down:</code></td><td>🔼 <code>:arrow_up_small:</code></td></tr><tr><td>🔃 <code>:arrows_clockwise:</code></td><td>🔄 <code>:arrows_counterclockwise:</code></td><td>⏪ <code>:rewind:</code></td></tr><tr><td>⏩ <code>:fast_forward:</code></td><td>ℹ️ <code>:information_source:</code></td><td>🆗 <code>:ok:</code></td></tr><tr><td>🔀 <code>:twisted_rightwards_arrows:</code></td><td>🔁 <code>:repeat:</code></td><td>🔂 <code>:repeat_one:</code></td></tr><tr><td>🆕 <code>:new:</code></td><td>🔝 <code>:top:</code></td><td>🆙 <code>:up:</code></td></tr><tr><td>🆒 <code>:cool:</code></td><td>🆓 <code>:free:</code></td><td>🆖 <code>:ng:</code></td></tr><tr><td>🎦 <code>:cinema:</code></td><td>🈁 <code>:koko:</code></td><td>📶 <code>:signal_strength:</code></td></tr><tr><td>🈂️ <code>:sa:</code></td><td>🚻 <code>:restroom:</code></td><td>🚹 <code>:mens:</code></td></tr><tr><td>🚺 <code>:womens:</code></td><td>🚼 <code>:baby_symbol:</code></td><td>🚭 <code>:no_smoking:</code></td></tr><tr><td>🅿️ <code>:parking:</code></td><td>♿️ <code>:wheelchair:</code></td><td>🚇 <code>:metro:</code></td></tr><tr><td>🛄 <code>:baggage_claim:</code></td><td>🉑 <code>:accept:</code></td><td>🚾 <code>:wc:</code></td></tr><tr><td>🚰 <code>:potable_water:</code></td><td>🚮 <code>:put_litter_in_its_place:</code></td><td>㊙️ <code>:secret:</code></td></tr><tr><td>㊗️ <code>:congratulations:</code></td><td>Ⓜ️ <code>:m:</code></td><td>🛂 <code>:passport_control:</code></td></tr><tr><td>🛅 <code>:left_luggage:</code></td><td>🛃 <code>:customs:</code></td><td>🉐 <code>:ideograph_advantage:</code></td></tr><tr><td>🆑 <code>:cl:</code></td><td>🆘 <code>:sos:</code></td><td>🆔 <code>:id:</code></td></tr><tr><td>🚫 <code>:no_entry_sign:</code></td><td>🔞 <code>:underage:</code></td><td>📵 <code>:no_mobile_phones:</code></td></tr><tr><td>🚯 <code>:do_not_litter:</code></td><td>🚱 <code>:non-potable_water:</code></td><td>🚳 <code>:no_bicycles:</code></td></tr><tr><td>🚷 <code>:no_pedestrians:</code></td><td>🚸 <code>:children_crossing:</code></td><td>⛔️ <code>:no_entry:</code></td></tr><tr><td>✳️ <code>:eight_spoked_asterisk:</code></td><td>✴️ <code>:eight_pointed_black_star:</code></td><td>💟 <code>:heart_decoration:</code></td></tr><tr><td>🆚 <code>:vs:</code></td><td>📳 <code>:vibration_mode:</code></td><td>📴 <code>:mobile_phone_off:</code></td></tr><tr><td>💹 <code>:chart:</code></td><td>💱 <code>:currency_exchange:</code></td><td>♈️ <code>:aries:</code></td></tr><tr><td>♉️ <code>:taurus:</code></td><td>♊️ <code>:gemini:</code></td><td>♋️ <code>:cancer:</code></td></tr><tr><td>♌️ <code>:leo:</code></td><td>♍️ <code>:virgo:</code></td><td>♎️ <code>:libra:</code></td></tr><tr><td>♏️ <code>:scorpius:</code></td><td>♐️ <code>:sagittarius:</code></td><td>♑️ <code>:capricorn:</code></td></tr><tr><td>♒️ <code>:aquarius:</code></td><td>♓️ <code>:pisces:</code></td><td>⛎ <code>:ophiuchus:</code></td></tr><tr><td>🔯 <code>:six_pointed_star:</code></td><td>❎ <code>:negative_squared_cross_mark:</code></td><td>🅰️ <code>:a:</code></td></tr><tr><td>🅱️ <code>:b:</code></td><td>🆎 <code>:ab:</code></td><td>🅾️ <code>:o2:</code></td></tr><tr><td>💠 <code>:diamond_shape_with_a_dot_inside:</code></td><td>♻️ <code>:recycle:</code></td><td>🔚 <code>:end:</code></td></tr><tr><td>🔛 <code>:on:</code></td><td>🔜 <code>:soon:</code></td><td>🕐 <code>:clock1:</code></td></tr><tr><td>🕜 <code>:clock130:</code></td><td>🕙 <code>:clock10:</code></td><td>🕥 <code>:clock1030:</code></td></tr><tr><td>🕚 <code>:clock11:</code></td><td>🕦 <code>:clock1130:</code></td><td>🕛 <code>:clock12:</code></td></tr><tr><td>🕧 <code>:clock1230:</code></td><td>🕑 <code>:clock2:</code></td><td>🕝 <code>:clock230:</code></td></tr><tr><td>🕒 <code>:clock3:</code></td><td>🕞 <code>:clock330:</code></td><td>🕓 <code>:clock4:</code></td></tr><tr><td>🕟 <code>:clock430:</code></td><td>🕔 <code>:clock5:</code></td><td>🕠 <code>:clock530:</code></td></tr><tr><td>🕕 <code>:clock6:</code></td><td>🕡 <code>:clock630:</code></td><td>🕖 <code>:clock7:</code></td></tr><tr><td>🕢 <code>:clock730:</code></td><td>🕗 <code>:clock8:</code></td><td>🕣 <code>:clock830:</code></td></tr><tr><td>🕘 <code>:clock9:</code></td><td>🕤 <code>:clock930:</code></td><td>💲 <code>:heavy_dollar_sign:</code></td></tr><tr><td>©️ <code>:copyright:</code></td><td>®️ <code>:registered:</code></td><td>™️ <code>:tm:</code></td></tr><tr><td>❌ <code>:x:</code></td><td>❗️ <code>:heavy_exclamation_mark:</code></td><td>‼️ <code>:bangbang:</code></td></tr><tr><td>⁉️ <code>:interrobang:</code></td><td>⭕️ <code>:o:</code></td><td>✖️ <code>:heavy_multiplication_x:</code></td></tr><tr><td>➕ <code>:heavy_plus_sign:</code></td><td>➖ <code>:heavy_minus_sign:</code></td><td>➗ <code>:heavy_division_sign:</code></td></tr><tr><td>💮 <code>:white_flower:</code></td><td>💯 <code>:100:</code></td><td>✔️ <code>:heavy_check_mark:</code></td></tr><tr><td>☑️ <code>:ballot_box_with_check:</code></td><td>🔘 <code>:radio_button:</code></td><td>🔗 <code>:link:</code></td></tr><tr><td>➰ <code>:curly_loop:</code></td><td>〰️ <code>:wavy_dash:</code></td><td>〽️ <code>:part_alternation_mark:</code></td></tr><tr><td>🔱 <code>:trident:</code></td><td>🔻 <code>:small_red_triangle_down:</code></td><td>🔺 <code>:small_red_triangle:</code></td></tr><tr><td>✅ <code>:white_check_mark:</code></td><td>🔲 <code>:black_square_button:</code></td><td>🔳 <code>:white_square_button:</code></td></tr><tr><td>⚫️ <code>:black_circle:</code></td><td>⚪️ <code>:white_circle:</code></td><td>🔴 <code>:red_circle:</code></td></tr><tr><td>🔵 <code>:large_blue_circle:</code></td><td>🔷 <code>:large_blue_diamond:</code></td><td>🔶 <code>:large_orange_diamond:</code></td></tr><tr><td>🔹 <code>:small_blue_diamond:</code></td><td>🔸 <code>:small_orange_diamond:</code></td><td></td></tr></tbody></table></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><hr><p>好啦，关于如何在hexo写作中优雅地使用emoji表情的内容到此结束啦。🎉🎉🎉如有问题请留言~欢迎批评指正！</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> hexo </category>
          
          <category> 拓展 </category>
          
          <category> emoji </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Hexo-emoji </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git命令解析及操作流程</title>
      <link href="/post/git_command.html"/>
      <url>/post/git_command.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>哈喽，这里是苏苏吖~，本文将详细介绍<code>Git</code>的命令解析和操作基本流程，话不多说，直接开始！。</p><h2 id="Git命令解析">Git命令解析</h2><h3 id="创建仓库">创建仓库</h3><p>创建仓库的命令用的多的有两种，</p><ul><li>一种是本地有项目文件，需要上传到github/gitee时，通过<code>git init</code>初始化仓库</li><li>另一种则是直接从远程仓库clone，通过<code>git clone [url]</code></li></ul><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center"><code>git init</code></td><td style="text-align:center">初始化仓库，在当前目录新建一个Git代码库，基本上是创建一个具有<code>objects</code>，<code>refs/head</code>，<code>refs/tags</code>和模板文件的<code>.git</code>目录。</td></tr><tr><td style="text-align:center"><code>git clone [url]</code></td><td style="text-align:center">拷贝一份<strong>远程仓库</strong>，也就是下载一个项目和它的整个代码历史。</td></tr></tbody></table><h3 id="增删文件">增删文件</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>git add [file1] [file2] ... </code></td><td>添加<strong>指定文件</strong>到暂存区</td></tr><tr><td><code>git add [dir]</code></td><td>添加<strong>指定目录</strong>到暂存区，包括子目录</td></tr><tr><td><code>git add .</code></td><td>添加当前目录的<strong>所有文件</strong>到暂存区</td></tr><tr><td><code>git add -p</code></td><td>添加每个变化前，都会要求确认  对于同一个文件的多处变化，可以实现<strong>分次提交</strong></td></tr><tr><td><code>git rm [file1] [file2] ...</code></td><td><strong>删除</strong>工作区文件，并且将这次删除放入暂存区</td></tr><tr><td><code>git rm --cached [file]</code></td><td>停止追踪指定文件，但该文件会保留在工作区</td></tr><tr><td><code>git mv [file-original] [file-renamed]</code></td><td><strong>改名</strong>文件，并且将这个改名放入暂存区</td></tr></tbody></table><h3 id="代码提交">代码提交</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>git commit -m [message]</code></td><td>提交暂存区到仓库区</td></tr><tr><td><code>git commit [file1] [file2] ... -m [message]</code></td><td>提交暂存区的<strong>指定文件</strong>到仓库区</td></tr><tr><td><code>git commit -a</code></td><td>提交工作区<strong>自上次commit之后</strong>的变化，直接到仓库区</td></tr><tr><td><code>git commit -v</code></td><td>提交时显示<strong>所有diff信息</strong></td></tr><tr><td><code>git commit --amend -m [message]</code></td><td>使用一次新的commit，替代上一次提交 如果代码没有任何新变化，则用来改写上一次commit的提交信息</td></tr><tr><td><code>git commit --amend [file1] [file2] ...</code></td><td><strong>重做上一次commit</strong>，并包括指定文件的新变化</td></tr></tbody></table><h3 id="分支">分支</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>git branch</code></td><td>列出所有<strong>本地分支</strong></td></tr><tr><td><code>git branch -r</code></td><td>列出所有<strong>远程分支</strong></td></tr><tr><td><code>git branch -a</code></td><td>列出所有本地分支和<strong>远程分支</strong></td></tr><tr><td><code>git branch [branch-name]</code></td><td>新建一个分支，但依然停留在当前分支</td></tr><tr><td><code>git checkout -b [branch]</code></td><td>新建一个分支，并切换到该分支</td></tr><tr><td><code>git branch [branch] [commit]</code></td><td>新建一个分支，指向指定commit</td></tr><tr><td><code>git branch --track [branch] [remote-branch]</code></td><td>新建一个分支，与指定的远程分支建立追踪关系</td></tr><tr><td><code>git checkout [branch-name]</code></td><td>切换到指定分支，并更新工作区</td></tr><tr><td><code>git checkout -</code></td><td><strong>切换</strong>到上一个分支</td></tr><tr><td><code>git branch --set-upstream [branch] [remote-branch]</code></td><td>建立追踪关系，在现有分支与指定的远程分支之间</td></tr><tr><td><code>git merge [branch]</code></td><td><strong>合并</strong>指定分支到当前分支</td></tr><tr><td><code>git cherry-pick [commit]</code></td><td>选择一个commit，合并进当前分支</td></tr><tr><td><code>git branch -d [branch-name]</code></td><td><strong>删除分支</strong></td></tr><tr><td><code>git push origin --delete [branch-name] 或 git branch -dr [remote/branch]</code></td><td><strong>删除远程分支</strong></td></tr><tr><td><code>git branch -dr [remote/branch]</code></td><td></td></tr></tbody></table><h3 id="标签">标签</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>git tag</code></td><td>列出所有tag</td></tr><tr><td><code>git tag [tag]</code></td><td>新建一个tag在当前commit</td></tr><tr><td><code>git tag [tag] [commit]</code></td><td>新建一个tag在指定commit</td></tr><tr><td><code>git tag -d [tag]</code></td><td>删除<strong>本地tag</strong></td></tr><tr><td><code>git push origin :refs/tags/[tagName]</code></td><td>删除<strong>远程tag</strong></td></tr><tr><td><code>git show [tag]</code></td><td>查看tag信息</td></tr><tr><td><code>git push [remote] [tag]</code></td><td>提交<strong>指定tag</strong></td></tr><tr><td><code>git push [remote] --tags</code></td><td>提交<strong>所有tag</strong></td></tr><tr><td><code>git checkout -b [branch] [tag]</code></td><td>新建一个分支，指向某个tag</td></tr></tbody></table><h3 id="查看信息和历史记录">查看信息和历史记录</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>git status</code></td><td>显示有变更的文件</td></tr><tr><td><code>git log</code></td><td>显示当前分支的版本历史</td></tr><tr><td><code>git log --stat</code></td><td>显示commit历史，以及每次commit发生变更的文件</td></tr><tr><td><code>git log -S [keyword]</code></td><td>搜索提交历史，根据关键词</td></tr><tr><td><code>git log [tag] HEAD --pretty=format:%s</code></td><td>显示某个commit之后的所有变动，每个commit占据一行</td></tr><tr><td><code>git log [tag] HEAD --grep feature</code></td><td>显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件</td></tr><tr><td><code>git log --follow [file] 或 git whatchanged [file]</code></td><td>显示某个文件的版本历史，包括文件改名</td></tr><tr><td><code>git log -p [file]</code></td><td>显示指定文件相关的每一次diff</td></tr><tr><td><code>git log -5 --pretty --oneline</code></td><td>显示过去5次提交</td></tr><tr><td><code>git shortlog -sn</code></td><td>显示所有提交过的用户，按提交次数排序</td></tr><tr><td><code>git blame [file]</code></td><td>显示指定文件是什么人在什么时间修改过</td></tr><tr><td><code>git diff</code></td><td>显示<strong>暂存区和工作区</strong>的差异</td></tr><tr><td><code>git diff --cached [file]</code></td><td>显示<strong>暂存区和上一个commit</strong>的差异</td></tr><tr><td><code>git diff HEAD</code></td><td>显示<strong>工作区与当前分支最新commit之间</strong>的差异</td></tr><tr><td><code>git diff [first-branch]...[second-branch]</code></td><td>显示<strong>两次提交之间</strong>的差异</td></tr><tr><td><code>git diff --shortstat &quot;@&#123;0 day ago&#125;&quot;</code></td><td><strong>显示今天你写了多少行代码</strong></td></tr><tr><td><code>git show [commit]</code></td><td>显示某次提交的元数据和内容变化</td></tr><tr><td><code>git show --name-only [commit]</code></td><td>显示某次提交发生变化的文件</td></tr><tr><td><code>git show [commit]:[filename]</code></td><td>显示某次提交时，某个文件的内容</td></tr><tr><td><code>git reflog</code></td><td>显示当前分支的最近几次提交</td></tr></tbody></table><h3 id="远程同步">远程同步</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>git fetch [remote]</code></td><td>下载远程仓库的所有变动（<strong>远程新增或删除分支都能显示</strong>）</td></tr><tr><td><code>git remote -v</code></td><td>显示<strong>所有远程仓库</strong></td></tr><tr><td><code>git config [--global] user.name &quot;[name]&quot; git config [--global] user.email &quot;[email address]&quot;</code></td><td>设置提交代码时的用户信息</td></tr><tr><td><code>git remote show [remote]</code></td><td>显示某个远程仓库的信息</td></tr><tr><td><code>git remote add [shortname] [url]</code></td><td>增加一个新的远程仓库，并命名</td></tr><tr><td><code>git pull [remote] [branch]</code></td><td>取回远程仓库的变化，并与本地分支合并</td></tr><tr><td><code>git push [remote] [branch]</code></td><td>上传本地指定分支到远程仓库</td></tr><tr><td><code>git push [remote] --force</code></td><td>强行推送当前分支到远程仓库，即使有冲突</td></tr><tr><td><code>git push [remote] --all</code></td><td>推送所有分支到远程仓库</td></tr></tbody></table><h3 id="撤销">撤销</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>git checkout [file]</code></td><td>恢复暂存区的指定文件到工作区</td></tr><tr><td><code>git checkout [commit] [file]</code></td><td>恢复某个commit的指定文件到暂存区和工作区</td></tr><tr><td><code>git checkout .</code></td><td>恢复暂存区的所有文件到工作区</td></tr><tr><td><code>git reset [file]</code></td><td>重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</td></tr><tr><td><code>git reset --hard</code></td><td>重置暂存区与工作区，与上一次commit保持一致</td></tr><tr><td><code>git reset [commit]</code></td><td>重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</td></tr><tr><td><code>git reset --hard [commit]</code></td><td>重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</td></tr><tr><td><code>git reset --keep [commit]</code></td><td>重置当前HEAD为指定commit，但保持暂存区和工作区不变</td></tr><tr><td><code>git revert [commit]</code></td><td>新建一个commit，用来撤销指定commit 后者的所有变化都将被前者抵消，并且应用到当前分支</td></tr><tr><td><code>git stash</code></td><td>暂时将未提交的变化移除，稍后再移入</td></tr><tr><td><code>git stash pop</code></td><td>暂时将未提交的变化移除，稍后再移入</td></tr></tbody></table><h3 id="其他">其他</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>git archive</code></td><td>生成一个可供发布的压缩包</td></tr><tr><td><code>git repack</code></td><td>打包未归档文件</td></tr><tr><td><code>git count-objects</code></td><td>计算解包的对象数量</td></tr><tr><td><code>git help 或 git --help</code></td><td><strong>Git帮助</strong>，查看git相关命令，如果想看某个特定命令的具体细节，可使用git [命令] --help,如 <strong>git commit --help</strong> 表示查看提交相关命令的帮助</td></tr></tbody></table><h2 id="Git操作流程">Git操作流程</h2><p><mark>独木不成林，孤掌也难鸣。</mark>仅仅只了解上述的命令而不会结合使用，是远远不够的。在实际开发过程中，我们需要将上面的命令<code>结合</code>起来使用，才能发挥git的最大作用。</p><p>在我们开始详细了解<code>提交同步</code>和<code>撤销及撤销同步</code>之前，先来看看git是如何完成这些操作的。</p><ul><li><p><mark>提交和同步</mark></p><p><img src="../post_img/Git-img/git%E6%93%8D%E4%BD%9C%E6%B5%81%E7%A8%8B.png" alt=""></p><blockquote><p>🐼 上述的流程图中，就将git提交时的分区及对应的git命令列出。要注意的是：<mark>本地远程仓库相当于远程仓库在本地的镜像，而当我们每一次pull/fetch时，本地远程仓库都会和远程仓库保持同步</mark></p></blockquote></li><li><p><mark>撤销及撤销同步</mark></p><p><img src="../post_img/Git-img/git%E6%93%8D%E4%BD%9C%E6%B5%81%E7%A8%8B2.png" alt=""></p><blockquote><p>🐼 同提交时的五个分区不同，撤销仅存在四个分区，但是又分别有着五个不同的状态：<code>未修改</code>，<code>已修改</code>，<code>已暂存</code>，<code>已提交</code>，<code>已推送</code>。在这五种状态中，如想要撤销代码提交，分别有着不同的git命令操作。</p></blockquote><p>下面详细说明如何一步步实现流程图中的结果。</p></li></ul><h3 id="代码提交和同步">代码提交和同步</h3><ul><li>第一步，<code>git init</code>初始化仓库，</li><li>第二步，<code>git remote add origin [仓库url地址]</code>将本地仓库推送到远程，</li><li>第三步，<code>git pull origin &lt;branch&gt;</code>拉取远程仓库文件，确保本地与远程一致，</li><li>第四步，<code>git add .</code>将当前目录所有文件添加到暂存区，</li><li>第五步，<code>git commit -m '提交信息‘</code>将暂存区文件提交到仓库区</li><li>第六步，<code>git push origin &lt;branch&gt;</code>将仓库区文件推送至指定的branch分支。</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git init</span><br><span class="line">$ git remote add origin [仓库url地址]</span><br><span class="line">$ git pull origin &lt;branch&gt;</span><br><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">&#x27;提交信息&#x27;</span></span><br><span class="line">$ git push origin &lt;branch&gt;</span><br></pre></td></tr></table></figure><p>以上是最基本的代码文件提交的步骤，当然，在这个过程中可能会遇到一下问题。下面列出我曾遇到的提交过程中的问题。</p><p>值得注意的是，第一步的初始化仓库一般不会出错，如果在提交出问题后一直解决不了，可以选择将目录下的<code>.git</code>文件删除，这是git初始化后的一些配置文件，删除后重新初始化即可，对目录下的其他文件无任何影响。</p><ul><li>问题一：<code>git remote add origin [仓库url地址]</code>报错，报错信息：<mark>fatal: remote origin already exists.</mark></li></ul><blockquote><p>🌺 解决方案：</p><p>1、先输入<code>git remote rm origin</code></p><p>2、再输入<code>git remote add origin [仓库url地址]</code>就行啦</p><p>3、如果输入<code>git remote rm origin</code> 还是报错的话，<mark>error: Could not remove config section ‘remote.origin’. </mark>我们需要修改<code>gitconfig</code>文件的内容</p><p>4、找到你的github的安装路径。</p><p>5、找到一个名为<code>gitconfig</code>的文件，打开它把里面的<code>[remote &quot;origin&quot;]那一行</code>删掉即可</p></blockquote><ul><li>问题二：<code>git push origin &lt;branch&gt;</code>报错。报错信息：<mark>error: failed to push some refs to ‘仓库地址’</mark></li></ul><blockquote><p>🌺 解决方案：</p><ul><li><p>方案一：在<code>git push</code>推送时，加上<code>-f</code>强制推送，这样上传时会以本地仓库为主，强行更改远程仓库文件。——不推荐</p></li><li><p>方案二：使用<code>git pull --rebase origin master</code>合并 远程 和 本地 的仓库，本地会多出之前不同步的文件，在使用 <code>git push -u origin master</code> 推送到 远程仓库中。</p>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git pull --rebase origin &lt;branch&gt;</span><br><span class="line">$ git push origin &lt;branch&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><h3 id="代码撤销和撤销同步">代码撤销和撤销同步</h3><h4 id="已修改，未暂存">已修改，未暂存</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git diff <span class="comment"># 列出所有的修改</span></span><br><span class="line">$ git diff xx/xx.py xx/xx2.py <span class="comment"># 列出某(几)个文件的修改</span></span><br><span class="line"></span><br><span class="line">$ git checkout <span class="comment"># 撤销项目下所有的修改</span></span><br><span class="line">$ git checkout . <span class="comment"># 撤销当前文件夹下所有的修改</span></span><br><span class="line">$ git checkout xx/xx.py xx/xx2.py <span class="comment"># 撤销某几个文件的修改</span></span><br><span class="line">$ git clean -f <span class="comment"># untracked状态，撤销新增的文件</span></span><br><span class="line">$ git clean -<span class="built_in">df</span> <span class="comment"># untracked状态，撤销新增的文件和文件夹</span></span><br></pre></td></tr></table></figure><h4 id="已暂存，未提交">已暂存，未提交</h4><blockquote><p>⛄ 此时已经执行过<code>git add</code>，但未执行<code>git commit</code>，但是用<code>git diff</code>已经看不到任何修改。 因为git diff检查的是工作区与暂存区之间的差异。</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git diff --cached <span class="comment"># 显示暂存区和本地仓库的差异</span></span><br><span class="line"></span><br><span class="line">$ git reset <span class="comment"># 暂存区的修改恢复到工作区</span></span><br><span class="line">$ git reset --soft <span class="comment"># 与git reset等价，回到已修改状态，修改的内容仍然在工作区中</span></span><br><span class="line">$ git reset --hard <span class="comment"># 回到未修改状态，清空暂存区和工作区</span></span><br></pre></td></tr></table></figure><blockquote><p>⛄ <code>git reset --hard</code> 操作等价于 <code>git reset</code> 和 <code>git checkout</code> 2步操作</p></blockquote><h4 id="已提交，未推送">已提交，未推送</h4><blockquote><p>⛄  执行完commit之后，会在仓库中生成一个版本号(hash值)，标志这次提交。之后任何时候，都可以借助这个hash值回退到这次提交。</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git diff &lt;branch-name1&gt; &lt;branch-name2&gt; <span class="comment"># 比较2个分支之间的差异</span></span><br><span class="line">$ git diff master origin/master <span class="comment"># 查看本地仓库与本地远程仓库的差异</span></span><br><span class="line"></span><br><span class="line">$ git reset --hard origin/master <span class="comment"># 回退与本地远程仓库一致</span></span><br><span class="line">$ git reset --hard HEAD^ <span class="comment"># 回退到本地仓库上一个版本</span></span><br><span class="line">$ git reset --hard &lt;<span class="built_in">hash</span> code&gt; <span class="comment"># 回退到任意版本</span></span><br><span class="line">$ git reset --soft/git reset <span class="comment"># 回退且回到已修改状态，修改仍保留在工作区中。 </span></span><br></pre></td></tr></table></figure><h4 id="已推送">已推送</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git push -f orgin master <span class="comment"># 强制覆盖远程分支</span></span><br><span class="line">$ git push -f <span class="comment"># 如果之前已经用 -u 关联过，则可省略分支名</span></span><br></pre></td></tr></table></figure><blockquote><p>⛄  慎用，一般情况下，本地分支比远程要新，所以可以直接推送到远程，但有时推送到远程后发现有问题，进行了版本回退，旧版本或者分叉版本推送到远程，需要添加 -f参数，表示强制覆盖。</p></blockquote><h3 id="关联远程仓库">关联远程仓库</h3><ul><li>如果还没有Git仓库，你需要</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure><ul><li>如果你想关联远程仓库</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git remote add &lt;name&gt; &lt;git-repo-url&gt;</span><br><span class="line"><span class="comment"># 例如 git remote add origin https://github.com/xxxxxx # 是远程仓库的名称，通常为 origin </span></span><br></pre></td></tr></table></figure><ul><li>如果你想关联多个远程仓库</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git remote add &lt;name&gt; &lt;another-git-repo-url&gt;<span class="comment"># 例如 git remote add coding https://coding.net/xxxxxx </span></span><br></pre></td></tr></table></figure><ul><li>忘了关联了哪些仓库或者地址</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git remote -v </span><br></pre></td></tr></table></figure><ul><li>如果远程有仓库，你需要clone到本地</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> &lt;git-repo-url&gt;   <span class="comment"># 关联的远程仓库将被命名为origin，这是默认的。</span></span><br></pre></td></tr></table></figure><ul><li>如果你想把别人仓库的地址改为自己的</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git remote set-url origin &lt;your-git-url&gt;</span><br></pre></td></tr></table></figure><h3 id="切换分支">切换分支</h3><ul><li>如果你想新建分支并切换</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout -b &lt;new-branch-name&gt;</span><br><span class="line"><span class="comment"># 例如 git checkout -b dev</span></span><br><span class="line"><span class="comment"># 如果仅新建，不切换，则去掉参数 -b</span></span><br></pre></td></tr></table></figure><ul><li>看看当前有哪些分支</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git branch</span><br><span class="line"><span class="comment"># * dev</span></span><br><span class="line"><span class="comment">#   master # 标*号的代表当前所在的分支</span></span><br></pre></td></tr></table></figure><ul><li>看看当前本地&amp;远程有哪些分支</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git branch -a</span><br><span class="line"><span class="comment"># * dev</span></span><br><span class="line"><span class="comment">#   master</span></span><br><span class="line"><span class="comment">#   remotes/origin/master</span></span><br></pre></td></tr></table></figure><ul><li>切换到现有的分支</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout master</span><br></pre></td></tr></table></figure><ul><li>将dev分支合并到master分支</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git merge &lt;branch-name&gt;</span><br><span class="line"><span class="comment"># 例如 git merge dev</span></span><br></pre></td></tr></table></figure><ul><li>将本地master分支推送到远程去</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git push origin master</span><br><span class="line"><span class="comment"># 你可以使用git push -u origin master将本地分支与远程分支关联，之后仅需要使用git push即可。</span></span><br></pre></td></tr></table></figure><ul><li>远程分支被更新了，需要更新代码</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git pull origin &lt;branch-name&gt;</span><br><span class="line"><span class="comment"># 之前如果push时使用过-u，那么就可以省略为git pull</span></span><br></pre></td></tr></table></figure><ul><li>本地有修改，能不能先git pull</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git stash <span class="comment"># 工作区修改暂存</span></span><br><span class="line">$ git pull  <span class="comment"># 更新分支</span></span><br><span class="line">$ git stash pop <span class="comment"># 暂存修改恢复到工作区</span></span><br></pre></td></tr></table></figure><h3 id="撤销操作">撤销操作</h3><ul><li>恢复暂存区文件到工作区</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout &lt;file-name&gt; </span><br></pre></td></tr></table></figure><ul><li>恢复暂存区的所有文件到工作区</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout .</span><br></pre></td></tr></table></figure><ul><li>重置暂存区的某文件，与上一次commit保持一致，但工作区不变</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git reset &lt;file-name&gt;</span><br></pre></td></tr></table></figure><ul><li>重置暂存区与工作区，与上一次commit保持一致</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git reset --hard &lt;file-name&gt; </span><br><span class="line"><span class="comment">#如果是回退版本(commit)，那么file，变成commit的hash码就好了。 </span></span><br></pre></td></tr></table></figure><ul><li>去掉某个commit</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git revert &lt;commit-hash&gt;</span><br><span class="line"><span class="comment"># 实质是新建了一个与原来完全相反的commit，抵消了原来commit的效果 </span></span><br></pre></td></tr></table></figure><ul><li>reset回退错误恢复</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git reflog <span class="comment">#查看最近操作记录</span></span><br><span class="line">$ git reset --hard HEAD&#123;5&#125; <span class="comment">#恢复到前五笔操作</span></span><br><span class="line">$ git pull origin backend-log <span class="comment">#再次拉取代码</span></span><br></pre></td></tr></table></figure><h3 id="版本回退或前进">版本回退或前进</h3><ul><li>查看历史版本</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span></span><br></pre></td></tr></table></figure><ul><li>你可能觉得这样的log不好看，试试这个</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --graph --decorate --abbrev-commit --all</span><br></pre></td></tr></table></figure><ul><li>检出到任意版本</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout a5d88ea</span><br><span class="line"><span class="comment"># hash码很长，通常6-7位就够了</span></span><br></pre></td></tr></table></figure><ul><li>远程仓库的版本很新，但是你还是想用老版本覆盖</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git push origin master --force</span><br><span class="line"><span class="comment"># 或者 git push -f origin master</span></span><br></pre></td></tr></table></figure><ul><li>觉得commit太多了? 多个commit合并为1个</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git rebase -i HEAD~4</span><br><span class="line"><span class="comment"># 这个命令，将最近4个commit合并为1个，HEAD代表当前版本。将进入VIM界面，你可以修改提交信息。推送到远程分支的commit，不建议这样做，多人合作时，通常不建议修改历史。 </span></span><br></pre></td></tr></table></figure><ul><li>想回退到某一个版本</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git reset --hard &lt;<span class="built_in">hash</span>&gt;</span><br><span class="line"><span class="comment"># 例如 git reset --hard a3hd73r</span></span><br><span class="line"><span class="comment"># --hard代表丢弃工作区的修改，让工作区与版本代码一模一样，与之对应，--soft参数代表保留工作区的修改。</span></span><br></pre></td></tr></table></figure><ul><li>想回退到上一个版本，有没有简便方法?</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git reset --hard HEAD^ </span><br></pre></td></tr></table></figure><ul><li>回退到上上个版本呢?</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git reset --hard HEAD^^</span><br><span class="line"><span class="comment"># HEAD^^可以换作具体版本hash值。</span></span><br></pre></td></tr></table></figure><ul><li>回退错了，能不能前进呀</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git reflog</span><br><span class="line"><span class="comment"># 这个命令保留了最近执行的操作及所处的版本，每条命令前的hash值，则是对应版本的hash值。使用上述的git checkout 或者 git reset命令 则可以检出或回退到对应版本。</span></span><br></pre></td></tr></table></figure><ul><li>刚才commit信息写错了，可以修改吗</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git commit --amend</span><br></pre></td></tr></table></figure><ul><li>看看当前状态吧</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git status </span><br></pre></td></tr></table></figure><hr><p>好啦，看到这里了想必已经对git的命令和工作流程有了一定程度的了解啦。那么本文也就到此结束啦🎉🎉🎉，这里是苏苏吖~，如有疑问请留言，有不对的地方也欢迎留言指正。Thanks♪(･ω･)ﾉ</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 工具 </category>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git分布式版本控制工具</title>
      <link href="/post/git_tool.html"/>
      <url>/post/git_tool.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>哈喽，这里是苏苏吖~，本文将详细介绍<code>Git</code>的Windows系统的安装过程，既方便自己日后查阅，也能提供一些参考。</p><h2 id="Git简介">Git简介</h2><blockquote><p>🌺 git是一个分布式版本控制软件，可以有效，高速的处理项目版本管理。</p></blockquote><h3 id="下载Git">下载Git</h3><p>打开git官网下载地址<a href="https://git-scm.com/">Git (git-scm.com)</a>，按照如下步骤下载git安装包到自己的电脑：</p><p><strong>步骤一</strong>、</p><img src="../post_img/Git-img/git-download.png" style="zoom:67%;" /><p><strong>步骤二</strong>、</p><img src="../post_img/Git-img/git-download1.png" style="zoom:67%;" /><p><strong>步骤三</strong>、</p><img src="../post_img/Git-img/git-download2.png" style="zoom:67%;" /><p>按照步骤下载完成后，就可以开始安装git了。Let’s go！</p><h2 id="Git安装">Git安装</h2><p>现在开始跟随步骤一步一步地安装Git吧~</p><h3 id="使用许可声明">使用许可声明</h3><p>右键运行下载好的安装包开始安装：</p><img src="../post_img/Git-img/git-setup.png"  /><h3 id="选择安装目录">选择安装目录</h3><p>Git对于安装目录的选择其实没有要求，不过！如果不想C盘日后爆红的话，还是换一个磁盘新建Git文件夹存放。如果需要对磁盘进行分区，请移步：&lt;先欠着…&gt;</p><p><img src="../post_img/Git-img/git-setup_choosefile.png" alt=""></p><h3 id="选择安装组件">选择安装组件</h3><p>这一步选项的意思已经做好翻译，推荐只需要多勾选第一项就行，其他的可以不管。</p><p><img src="../post_img/Git-img/git-setup_selectconfig.png" alt=""></p><p><img src="../post_img/Git-img/git-setup_selectconfig1.png" alt=""></p><h3 id="选择开始菜单文件">选择开始菜单文件</h3><p>这一步不需要做什么修改，下一步就好</p><p><img src="../post_img/Git-img/git-setup_next.png" alt=""></p><h3 id="选择Git默认编辑器">选择Git默认编辑器</h3><p>Git默认内置了很多编辑器可供选择，根据需要选择就行。</p><p><img src="../post_img/Git-img/git-setup_editor.png" alt=""></p><h3 id="决定初始化新项目的主干名称">决定初始化新项目的主干名称</h3><p>不多说，看图！</p><p><img src="../post_img/Git-img/git-setup_branch.png" alt=""></p><h3 id="调整path环境变量">调整path环境变量</h3><p><img src="../post_img/Git-img/git-setup_path.png" alt=""></p><h3 id="选择SSH的执行文件">选择SSH的执行文件</h3><p><img src="../post_img/Git-img/git-setup_ssh.png" alt=""></p><h3 id="选择HTTPS后端传输">选择HTTPS后端传输</h3><p><img src="../post_img/Git-img/git-setup_http.png" alt=""></p><h3 id="配置行位符号转换">配置行位符号转换</h3><p><img src="../post_img/Git-img/git-setup_lineend.png" alt=""></p><h3 id="配置终端模拟器Git-Bash">配置终端模拟器Git Bash</h3><p><img src="../post_img/Git-img/git-setup_bash.png" alt=""></p><h3 id="设置默认git-pull行为">设置默认<code>git pull</code>行为</h3><p><img src="../post_img/Git-img/git-setup_pull.png" alt=""></p><blockquote><p>🐟 上面的内容翻译如下：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ODefault(fast-forward or merge)</span><br><span class="line">This is the standard behavior ofgit pull&quot;: fast-forward the current branch to </span><br><span class="line">the fetched branch when possible, otherwise create a merge commit.</span><br><span class="line">默认（快进或合并）</span><br><span class="line">这是 &quot;git pull&quot; 的标准行为：在可能的情况下将 当前分支 快进到 获取的分支，否则创建合并提交。</span><br><span class="line"></span><br><span class="line">ORebase Rebase the current branch onto the fetched branch. If there are no local </span><br><span class="line">commits to rebase, this is equivalent to a fast-forward.</span><br><span class="line">变基将当前分支变基到获取的分支上。如果没有本地提交要变基，则等同于快进。</span><br><span class="line"></span><br><span class="line">Oonly ever fast-forward </span><br><span class="line">Fast-forward to the fetched branch. Fail if that is not possible.</span><br><span class="line">只能快进快进到获取的分支。如果不可能，则失败。</span><br><span class="line">————————————————</span><br><span class="line">版权声明：本文为CSDN博主「mukes」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。</span><br><span class="line">原文链接：https://blog.csdn.net/mukes/article/details/115693833</span><br></pre></td></tr></table></figure><h3 id="选择凭证">选择凭证</h3><p>git提供了两个选项：</p><ul><li>Git 凭证管理</li><li>不使用凭证助手</li></ul><p>第一个选项是提供<code>登录凭证</code>帮助的，Git 有时需要用户的凭据才能执行操作；例如，可能需要输入<code>用户名</code>和<code>密码</code>才能通过 HTTP 访问远程存储库</p><p><img src="../post_img/Git-img/git-setup_helper.png" alt=""></p><h3 id="配置额外选项">配置额外选项</h3><p>此处两个选项分别是：</p><ul><li>启用文件系统缓存：就是将批量读取文件系统数据并将其缓存在内存中以进行某些操作，可以显著提升性能。这个选项默认开启。</li><li>启用符号链接：符号链接是一类特殊的文件， 其包含有一条以绝对路径或者相对路径的形式指向其它文件或者目录的<code>引用</code>，类似于 Windows 的快捷方式，不完全等同 类Unix（如 Linux） 下的 符号链接。因为该功能的支持需要一些<a href="https://github.com/git-for-windows/git/wiki/Symbolic-Links">条件</a>，所以默认不开启。</li></ul><p><img src="../post_img/Git-img/git-setup_extra.png" alt=""></p><h3 id="配置实验性选项">配置实验性选项</h3><p>这里的功能都属于实验性选项，可以不勾选。</p><p><img src="../post_img/Git-img/git-setup_experimental.png" alt=""></p><p>完成这一步后等待安装就行。安装成功后：</p><p><img src="../post_img/Git-img/git-setup_success.png" alt=""></p><h3 id="Git基本配置">Git基本配置</h3><p>git安装好以后，可以通过<code>git config --list</code>查看当前git的配置</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --list</span><br></pre></td></tr></table></figure><p><img src="../post_img/Git-img/git-config_list.png" alt=""></p><p><code>git config -e [--global]</code>编辑git配置文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config -e [--global]</span><br></pre></td></tr></table></figure><p><code>git config [--global] user.name &quot;[name]&quot;和git config [--global] user.email &quot;[email address]&quot;</code>设置提交代码时的用户信息。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config [--global] user.name <span class="string">&quot;[name]&quot;</span></span><br><span class="line">$ git config [--global] user.email <span class="string">&quot;[email address]&quot;</span></span><br></pre></td></tr></table></figure><hr><p>好啦，关于Git的安装和基本配置的内容到此结束啦🎉🎉🎉，这里是苏苏吖~，如有疑问请留言，有不对的地方也欢迎留言指正。Thanks♪(･ω･)ﾉ</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 工具 </category>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>遇见就是上上签</title>
      <link href="/post/6713c359.html"/>
      <url>/post/6713c359.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>🎀 哈喽，这里是苏苏吖~作为一枚曾经的文科生，虽然现在和代码黏在一起，但是！心里总是会有一些话想说出来，因此开设随笔一栏，欢迎大家留言呀！苏苏也会不定时写一写文章发表哒，生活虽然破破烂烂，也许在某个不起眼的角落就隐藏着诗和远方呢，对吧。</p></blockquote><hr><p style="text-align: center; font-size:20px; font-weight: bold;">遇见就是上上签</p><p>​        有一段时间，我突然想起了一句话：“我们都在错过与遇见，世界很大，我们总是错过，世界又很小，我们总能遇见。”这句话让我深思，揭示了生命中那种错综复杂的缘分与命运。而让我沉醉其中的是，它唤起了我心底深处的信念——遇见就是上上签。</p><p>​        有人说过：“我遇见了春天，遇见了花朵绽放，遇见了温暖。”这句话如诗一般，将遇见的美妙描绘得淋漓尽致。无论是走在人生旅途中，还是在命运的交叉路口，每一次遇见都是一份珍贵的礼物。它们如温暖的阳光般温暖着我们的心灵，如绽放的花朵般美好，给予我们力量和勇气。</p><p>每一次遇见都是一次上上签。无论是两个人相遇的瞬间，还是我们与机遇相交的时刻，每一次邂逅都是个体与世界、与命运的纽带。微笑中传递的喜悦，目光中流露的温情，每一次遇见都是一种奇妙的交织。</p><p>​        遇见并不仅限于与人相会，也包括那些似乎与我们有缘，却易被忽视的机会。当我们遭遇一次改变人生轨迹的机会，一次让我们超越困境的契机，那也是一次上上签的邂逅。这些时刻让我们感受到生命的转折与变幻，为我们的成长和拓宽眼界注入力量。遇见的历程使我们更加自信、坚定，不断超越自我。</p><p>然而，遇见与错过是难以避免的。我们常常会错过那些本应拥有的美好，错过一个与自己契合的人，错过能改变命运的机会。然而，世界很大，我们常常会错过；然而，世界又很小，我们总能遇见。只要我们怀抱希望和勇气，保持对生命的信心，终究还会遇见那份注定的美好。</p><p>​        每一次的错过使我们更加珍惜遇见的时刻。当我们再次遇见一个人或一个机会时，我们会怀着感恩的心态对待，因为我们懂得失去与获得的珍贵。每一次失落、每一次错过都成为下一次遇见的引子，让我们更加明白每一次遇见的幸运。</p><p>​        回望过往，所有的遇见与错过都是生命中的精彩篇章。它们交汇成了我们多彩的人生，注入其中的是梦想和希望。遇见与错过是人生旅途中必经的一部分，它们共同编织着我们的故事。</p><p>​        遇见就是上上签。让我们怀着感恩的心，敞开胸怀去感受每一次独特的邂逅，为自己留下独特的痕迹。世界很大，我们常常错过，然而世界又很小，我们总能遇见。相信每一次遇见都是生命中的上上签，照亮我们前进的道路。因此，让我们勇敢地迈出步伐，相信遇见的力量，创造属于自己的绚丽人生。</p><hr><p>遇见就是上上签，那么，我的下一次上上签，你是否还在那拥挤的人潮中等着我呢。总有一天我们会遇见的，对吧。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写在前面</title>
      <link href="/post/ca8bfdf3.html"/>
      <url>/post/ca8bfdf3.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="写在前面">写在前面</h2><p>​    首先十分感谢您能抽出宝贵的时间来阅读这篇博客。同时十分欢迎您能提出宝贵的意见，帮助我改进博客的内容。<br>​    本博客的定位是记录自己学习过程中的一些收获，以及一些思考，所以博客的内容会比较杂，会包含一些技术，一些生活，一些思考，一些总结等等。<br>​    博客的内容会以技术为主，生活为辅，生活内容会以生活为主，技术内容会以技术为主。</p><hr /><p>​    博主在搭建过程中其实也遇到了很多很多的问题，诸如字体的设置、页面通用样式的设置、主题的diy等等，在此过程中，十分感谢<a href="https://fe32.top">唐志远</a>大佬和<a href="">AKira糖果屋</a>各位大佬的帮助。让我能够将博客搭建呈现在的样子，虽然还不是很完美，但我会尽力继续做好！</p><p>​</p><p>​    由于工作原因，文章更新频率不会很大，也许偶尔更一下，有留言回复我看到了会回复，如果很着急解决可以先添加QQ，注明来意能解决会尽量帮忙解决！如果解决不了也请不要责怪我，毕竟我也能力有限，感谢理解！</p><p>​    最后，作为一枚二次元加程序猿，线下活动一般有空都会出cos去，偶遇欢迎集邮，很友好，不凶。技术问题也欢迎一起讨论。</p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
          <category> 自述 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> 自述 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
